import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  SafeAreaView,
  Image,
  Alert,
  TextInput,
  Modal,
  Platform,
  Linking,
} from 'react-native';
import { Settings, MapPin, Building, Users, CreditCard as Edit, Camera, Shield, Key, Download, Trash2 } from 'lucide-react-native';
import { Mail } from 'lucide-react-native';
import { FileText } from 'lucide-react-native';
import { LogOut, Snowflake } from 'lucide-react-native';
import { router } from 'expo-router';
import { useAuth } from '@/contexts/AuthContext';
import { supabase } from '@/lib/supabase';
import * as ImagePicker from 'expo-image-picker';
import { getFriendCount } from '@/lib/friendUtils';
import AdvertisementBanner from '@/components/AdvertisementBanner';

export default function ProfilePage() {
  const { user, signOut } = useAuth();
  const [showSettings, setShowSettings] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showPasswordModal, setShowPasswordModal] = useState(false);
  const [showAboutModal, setShowAboutModal] = useState(false);
  const [showFeedbackModal, setShowFeedbackModal] = useState(false);
  const [currentUserData, setCurrentUserData] = useState<any>(null);
  const [friendCount, setFriendCount] = useState(0);
  const [postsCount, setPostsCount] = useState(0);
  const [applicationsCount, setApplicationsCount] = useState(0);
  const [refreshing, setRefreshing] = useState(false);
  const [editForm, setEditForm] = useState({
    first_name: '',
    last_name: '',
    city: '',
    institution: '',
    about: '',
    avatar_url: '',
  });
  const [passwordForm, setPasswordForm] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: '',
  });
  const [feedbackForm, setFeedbackForm] = useState({
    subject: '',
    message: '',
    rating: 5,
    feedback_type: 'general',
  });
  const [submittingFeedback, setSubmittingFeedback] = useState(false);

  const [userProfile] = useState({
    name: 'Kullanƒ±cƒ±', // Will be updated from database
    title: 'ƒ∞lk ve Acil Yardƒ±m Teknikeri',
    institution: 'Kurum Bilgisi Yok', // Will be updated from database
    city: '≈ûehir Bilgisi Yok', // Will be updated from database
    about: 'Acil tƒ±p alanƒ±nda 5 yƒ±llƒ±k deneyime sahip, hasta bakƒ±mƒ± ve acil m√ºdahale konularƒ±nda uzmanla≈ümƒ±≈ü bir saƒülƒ±k profesyoneliyim.',
    avatar: 'https://images.pexels.com/photos/6129967/pexels-photo-6129967.jpeg?auto=compress&cs=tinysrgb&w=200&h=200&fit=crop',
  });


  // Fetch real data from database
  useEffect(() => {
    if (user) {
      fetchCounts();
    }
  }, [user]);

  const fetchCounts = async () => {
    try {
      if (user?.id) {
        const friendCount = await getFriendCount(user.id);
        setFriendCount(friendCount);
        
        // Get posts count
        const { count: postsCount, error: postsError } = await supabase
          .from('posts')
          .select('*', { count: 'exact', head: true })
          .eq('user_id', user.id)
          .is('deleted_at', null);
        
        if (postsError) {
          console.error('Error fetching posts count:', postsError);
        } else {
          setPostsCount(postsCount || 0);
        }
        
        // Get job applications count
        const { count: applicationsCount, error: applicationsError } = await supabase
          .from('job_applications')
          .select('*', { count: 'exact', head: true })
          .eq('user_id', user.id);
        
        if (applicationsError) {
          console.error('Error fetching applications count:', applicationsError);
        } else {
          setApplicationsCount(applicationsCount || 0);
        }
      }
    } catch (error) {
      console.error('Error in fetchCounts:', error);
      // Set default values on error
      setFriendCount(0);
      setPostsCount(0);
      setApplicationsCount(0);
    }
  };

  const fetchCurrentUserData = async () => {
    try {
      console.log('üîç Profile: Fetching user data for ID:', user?.id);
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user?.id || '')
        .maybeSingle();

      if (error) throw error;
      
      console.log('üîç Profile: Fetched user data:', data);
      console.log('üîç Profile: User role:', data?.role);
      
      if (data) {
        setCurrentUserData(data);
        setEditForm({
          first_name: data.first_name || '',
          last_name: data.last_name || '',
          city: data.city || '',
          institution: data.institution || '',
          about: data.about || userProfile.about,
          avatar_url: data.avatar_url || '',
        });
      } else {
        console.log('‚ùå Profile: No user data found');
        // No profile found, initialize with empty values
        setCurrentUserData(null);
        setEditForm({
          first_name: '',
          last_name: '',
          city: '',
          institution: '',
          about: userProfile.about,
          avatar_url: '',
        });
      }
    } catch (error) {
      console.error('Error fetching user data:', error);
    }
  };

  // Fetch current user data from Supabase
  useEffect(() => {
    if (user) {
      fetchCurrentUserData();
    }
  }, [user]);

  const handleEditProfile = async () => {
    try {
      if (!user?.id) {
        Alert.alert('Hata', 'Kullanƒ±cƒ± bilgisi bulunamadƒ±');
        return;
      }

      const { error } = await supabase
        .from('profiles')
        .update({
          first_name: editForm.first_name,
          last_name: editForm.last_name,
          city: editForm.city,
          institution: editForm.institution,
          about: editForm.about,
          avatar_url: editForm.avatar_url,
        })
        .eq('id', user.id);

      if (error) throw error;

      Alert.alert('Ba≈üarƒ±lƒ±', 'Profil bilgileriniz g√ºncellendi!');
      setShowEditModal(false);
      fetchCurrentUserData(); // Refresh data
    } catch (error) {
      console.error('Error updating profile:', error);
      Alert.alert('Hata', 'Profil g√ºncellenirken hata olu≈ütu');
    }
  };

  const handleChangePassword = async () => {
    if (passwordForm.newPassword !== passwordForm.confirmPassword) {
      Alert.alert('Hata', 'Yeni ≈üifreler e≈üle≈ümiyor');
      return;
    }

    if (passwordForm.newPassword.length < 6) {
      Alert.alert('Hata', 'Yeni ≈üifre en az 6 karakter olmalƒ±dƒ±r');
      return;
    }

    try {
      const { error } = await supabase.auth.updateUser({
        password: passwordForm.newPassword
      });

      if (error) throw error;

      Alert.alert('Ba≈üarƒ±lƒ±', '≈ûifreniz ba≈üarƒ±yla deƒüi≈ütirildi!');
      setShowPasswordModal(false);
      setPasswordForm({ currentPassword: '', newPassword: '', confirmPassword: '' });
    } catch (error) {
      console.error('Error changing password:', error);
      const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata';
      Alert.alert('Hata', `≈ûifre deƒüi≈ütirilirken hata olu≈ütu: ${errorMessage}`);
    }
  };

  const handleSubmitFeedback = async () => {
    if (!feedbackForm.subject.trim() || !feedbackForm.message.trim()) {
      Alert.alert('Hata', 'L√ºtfen konu ve mesaj alanlarƒ±nƒ± doldurun');
      return;
    }

    if (!user?.id) {
      Alert.alert('Hata', 'Kullanƒ±cƒ± bilgisi bulunamadƒ±');
      return;
    }

    setSubmittingFeedback(true);

    try {
      const { error } = await supabase
        .from('feedback')
        .insert({
          user_id: user.id,
          subject: feedbackForm.subject.trim(),
          message: feedbackForm.message.trim(),
          rating: feedbackForm.rating,
          feedback_type: feedbackForm.feedback_type,
        });

      if (error) throw error;

      Alert.alert('Ba≈üarƒ±lƒ±', 'Geri bildiriminiz ba≈üarƒ±yla g√∂nderildi! Te≈üekk√ºr ederiz.');
      setShowFeedbackModal(false);
      setFeedbackForm({
        subject: '',
        message: '',
        rating: 5,
        feedback_type: 'general',
      });
    } catch (error) {
      console.error('Error submitting feedback:', error);
      const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata';
      Alert.alert('Hata', `Geri bildirim g√∂nderilirken hata olu≈ütu: ${errorMessage}`);
    } finally {
      setSubmittingFeedback(false);
    }
  };

  const handleImagePicker = async () => {
    try {
      console.log('üì∏ Starting profile image picker...');
      
      Alert.alert(
        'Profil Fotoƒürafƒ±',
        'Fotoƒüraf kaynaƒüƒ±nƒ± se√ßin:',
        [
          { text: 'ƒ∞ptal', style: 'cancel' },
          { text: 'Kamera', onPress: () => openCamera() },
          { text: 'Galeri', onPress: () => openGallery() },
        ]
      );
    } catch (error) {
      console.error('Error requesting permissions:', error);
      Alert.alert('Hata', 'ƒ∞zin alƒ±nƒ±rken hata olu≈ütu');
    }
  };

  const promptForProfileImageUrl = () => {
    Alert.prompt(
      'Profil Fotoƒürafƒ± URL',
      'Profil fotoƒürafƒ± URL\'sini girin:',
      [
        { text: 'ƒ∞ptal', style: 'cancel' },
        { 
          text: 'G√ºncelle', 
          onPress: (url) => {
            if (url && url.trim()) {
              updateProfileImageFromUrl(url.trim());
            } else {
              Alert.alert('Hata', 'Ge√ßerli bir URL girin');
            }
          }
        }
      ],
      'plain-text'
    );
  };

  const updateProfileImageFromUrl = async (imageUrl: string) => {
    try {
      console.log('üì∏ Updating profile image from URL:', imageUrl);
      
      // Validate URL
      if (!imageUrl.startsWith('http://') && !imageUrl.startsWith('https://')) {
        Alert.alert('Hata', 'Ge√ßerli bir URL girin (http:// veya https:// ile ba≈ülamalƒ±)');
        return;
      }

      // Update profile with new avatar URL
      const { error: updateError } = await supabase
        .from('profiles')
        .update({
          avatar_url: imageUrl,
          updated_at: new Date().toISOString(),
        })
        .eq('id', user?.id || '');

      if (updateError) {
        throw updateError;
      }

      Alert.alert('Ba≈üarƒ±lƒ±', 'Profil fotoƒürafƒ±nƒ±z g√ºncellendi!');
      fetchCurrentUserData(); // Refresh data
      console.log('‚úÖ Profile image updated from URL');
    } catch (error) {
      console.error('Error updating profile image from URL:', error);
      Alert.alert('Hata', 'Profil fotoƒürafƒ± g√ºncellenirken hata olu≈ütu');
    }
  };

  const openCamera = async () => {
    try {
      const permissionResult = await ImagePicker.requestCameraPermissionsAsync();
      
      if (permissionResult.granted === false) {
        Alert.alert('ƒ∞zin Gerekli', 'Kamera kullanmak i√ßin izin gerekli');
        return;
      }

      const result = await ImagePicker.launchCameraAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
      });

      if (!result.canceled && result.assets[0]) {
        await uploadImage(result.assets[0].uri);
      }
    } catch (error) {
      console.error('Error opening camera:', error);
      Alert.alert('Hata', 'Kamera a√ßƒ±lƒ±rken hata olu≈ütu');
    }
  };

  const openGallery = async () => {
    try {
      const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();
      
      if (permissionResult.granted === false) {
        Alert.alert('ƒ∞zin Gerekli', 'Galeri eri≈üimi i√ßin izin gerekli');
        return;
      }

      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        allowsEditing: true,
        aspect: [1, 1],
        quality: 0.8,
      });

      if (!result.canceled && result.assets[0]) {
        await uploadImage(result.assets[0].uri);
      }
    } catch (error) {
      console.error('Error opening gallery:', error);
      Alert.alert('Hata', 'Galeri a√ßƒ±lƒ±rken hata olu≈ütu');
    }
  };

  const uploadImage = async (imageUri: string) => {
    try {
      // Create a unique filename
      const fileName = `avatar_${user?.id}_${Date.now()}.jpg`;
      
      // Convert image to blob for web, or use file for mobile
      let imageFile;
      
      if (Platform.OS === 'web') {
        const response = await fetch(imageUri);
        imageFile = await response.blob();
      } else {
        // For mobile, create FormData
        const formData = new FormData();
        formData.append('file', {
          uri: imageUri,
          type: 'image/jpeg',
          name: fileName,
        } as any);
        imageFile = formData;
      }

      // Upload to Supabase Storage
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from('avatars')
        .upload(`${user?.id}/${fileName}`, imageFile, {
          cacheControl: '3600',
          upsert: false,
        });

      if (uploadError) {
        throw uploadError;
      }

      // Get public URL
      const { data: urlData } = supabase.storage
        .from('avatars')
        .getPublicUrl(`${user?.id}/${fileName}`);

      if (urlData?.publicUrl) {
        // Update profile with new avatar URL
        const { error: updateError } = await supabase
          .from('profiles')
          .update({
            avatar_url: urlData.publicUrl,
            updated_at: new Date().toISOString(),
          })
          .eq('id', user?.id || '');

        if (updateError) {
          throw updateError;
        }

        Alert.alert('Ba≈üarƒ±lƒ±', 'Profil fotoƒürafƒ±nƒ±z g√ºncellendi!');
        fetchCurrentUserData(); // Refresh data
      }
    } catch (error) {
      console.error('Error uploading image:', error);
      Alert.alert('Hata', 'Fotoƒüraf y√ºklenirken hata olu≈ütu');
    }
  };

  const handleDeleteAccount = () => {
    Alert.alert(
      'Hesabƒ± Sil',
      'Bu i≈ülem geri alƒ±namaz. T√ºm verileriniz silinecek.\n\nEmin misiniz?',
      [
        { text: 'ƒ∞ptal', style: 'cancel' },
        { 
          text: 'Sil', 
          style: 'destructive',
          onPress: async () => {
            Alert.alert(
              'Son Onay',
              'Hesabƒ±nƒ±zƒ± silmek i√ßin "Sƒ∞L" yazƒ±n:',
              [
                { text: 'ƒ∞ptal', style: 'cancel' },
                {
                  text: 'Devam Et',
                  style: 'destructive',
                  onPress: () => {
                    // Show a prompt for confirmation
                    Alert.prompt(
                      'Hesap Silme Onayƒ±',
                      'Hesabƒ±nƒ±zƒ± silmek i√ßin "Sƒ∞L" yazƒ±n:',
                      [
                        { text: 'ƒ∞ptal', style: 'cancel' },
                        {
                          text: 'Hesabƒ± Sil',
                          style: 'destructive',
                          onPress: async (inputText) => {
                            if (inputText?.toUpperCase() === 'Sƒ∞L') {
                              try {
                                const userId = user?.id;
                                if (!userId) {
                                  throw new Error('Kullanƒ±cƒ± ID bulunamadƒ±');
                                }

                                console.log('üóëÔ∏è Starting account deletion for user:', userId);

                                // Delete all related data
                                const deleteOperations = [
                                  // Chat data
                                  supabase.from('chat_messages').delete().eq('user_id', userId),
                                  supabase.from('chat_room_members').delete().eq('user_id', userId),
                                  
                                  // Friend data
                                  supabase.from('friend_requests').delete().or(`sender_id.eq.${userId},receiver_id.eq.${userId}`),
                                  supabase.from('friendships').delete().or(`user1_id.eq.${userId},user2_id.eq.${userId}`),
                                  
                                  // Private messages
                                  supabase.from('private_messages').delete().or(`sender_id.eq.${userId},receiver_id.eq.${userId}`),
                                  
                                  // Posts and content
                                  supabase.from('posts').delete().eq('user_id', userId),
                                  supabase.from('job_applications').delete().eq('user_id', userId),
                                  supabase.from('event_registrations').delete().eq('user_id', userId),
                                  supabase.from('survey_responses').delete().eq('user_id', userId),
                                  
                                  // CV data
                                  supabase.from('cvs').delete().eq('user_id', userId),
                                  
                                  // Profile (last)
                                  supabase.from('profiles').delete().eq('id', userId)
                                ];

                                // Execute all delete operations
                                for (const operation of deleteOperations) {
                                  const { error } = await operation;
                                  if (error) {
                                    console.warn('‚ö†Ô∏è Delete operation warning:', error);
                                    // Continue with other operations even if one fails
                                  }
                                }

                                console.log('‚úÖ All data deleted successfully');

                                // Sign out user
                                await signOut();
                                Alert.alert('Ba≈üarƒ±lƒ±', 'Hesabƒ±nƒ±z ve t√ºm verileriniz ba≈üarƒ±yla silindi');
                                router.replace('/auth/login');
                              } catch (error) {
                                console.error('Error deleting account:', error);
                                const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata';
                                Alert.alert('Hata', `Hesap silinirken hata olu≈ütu: ${errorMessage}`);
                              }
                            } else {
                              Alert.alert('Hata', 'Onay metni yanlƒ±≈ü. Hesap silinmedi.');
                            }
                          }
                        }
                      ],
                      'plain-text'
                    );
                  }
                }
              ]
            );
          }
        }
      ]
    );
  };

  const handleFreezeAccount = () => {
    Alert.alert(
      'Hesabƒ± Dondur',
      'Hesabƒ±nƒ±zƒ± ge√ßici olarak dondurmak istediƒüinizden emin misiniz?\n\nDondurulmu≈ü hesaplar:\n‚Ä¢ Giri≈ü yapamaz\n‚Ä¢ Mesaj alamaz\n‚Ä¢ Payla≈üƒ±m yapamaz\n\nHesabƒ±nƒ±zƒ± yeniden aktifle≈ütirmek i√ßin destek ekibiyle ileti≈üime ge√ßmeniz gerekir.',
      [
        { text: 'ƒ∞ptal', style: 'cancel' },
        { 
          text: 'Dondur', 
          style: 'destructive',
          onPress: async () => {
            Alert.alert(
              'Son Onay',
              'Hesabƒ±nƒ±zƒ± dondurmak i√ßin "DONDUR" yazƒ±n:',
              [
                { text: 'ƒ∞ptal', style: 'cancel' },
                {
                  text: 'Devam Et',
                  style: 'destructive',
                  onPress: () => {
                    Alert.prompt(
                      'Hesap Dondurma Onayƒ±',
                      'Hesabƒ±nƒ±zƒ± dondurmak i√ßin "DONDUR" yazƒ±n:',
                      [
                        { text: 'ƒ∞ptal', style: 'cancel' },
                        {
                          text: 'Hesabƒ± Dondur',
                          style: 'destructive',
                          onPress: async (inputText) => {
                            if (inputText?.toUpperCase() === 'DONDUR') {
                              try {
                                const { error } = await supabase
                                  .from('profiles')
                                  .update({ 
                                    is_blocked: true,
                                    updated_at: new Date().toISOString()
                                  })
                                  .eq('id', user?.id || '');

                                if (error) throw error;

                                Alert.alert(
                                  'Hesap Donduruldu', 
                                  'Hesabƒ±nƒ±z ba≈üarƒ±yla donduruldu. Yeniden aktifle≈ütirmek i√ßin kariyersaglik@outlook.com adresine e-posta g√∂nderin.',
                                  [
                                    { 
                                      text: 'Tamam', 
                                      onPress: async () => {
                                        await signOut();
                                        router.replace('/auth/login');
                                      }
                                    }
                                  ]
                                );
                              } catch (error) {
                                console.error('Error freezing account:', error);
                                const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata';
                                Alert.alert('Hata', `Hesap dondurulurken hata olu≈ütu: ${errorMessage}`);
                              }
                            } else {
                              Alert.alert('Hata', 'Onay metni yanlƒ±≈ü. Hesap dondurulmadƒ±.');
                            }
                          }
                        }
                      ],
                      'plain-text'
                    );
                  }
                }
              ]
            );
          }
        }
      ]
    );
  };


  const downloadUserData = async () => {
    try {
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user?.id || '')
        .single();

      if (error) throw error;

      // Create a formatted data string
      const userData = {
        'Ad Soyad': `${data.first_name || ''} ${data.last_name || ''}`.trim(),
        'E-posta': data.email || '',
        'Bran≈ü': data.branch || '',
        '≈ûehir': data.city || '',
        'Kurum': data.institution || '',
        'Rol': data.role || 'user',
        'Hakkƒ±nda': data.about || '',
        'Kayƒ±t Tarihi': data.created_at ? new Date(data.created_at).toLocaleDateString('tr-TR', {
          timeZone: 'Europe/Istanbul'
        }) : '',
        'Son G√ºncelleme': data.updated_at ? new Date(data.updated_at).toLocaleDateString('tr-TR', {
          timeZone: 'Europe/Istanbul'
        }) : '',
        'Son Giri≈ü': data.last_login ? new Date(data.last_login).toLocaleDateString('tr-TR', {
          timeZone: 'Europe/Istanbul'
        }) : 'Bilinmiyor'
      };

      const formattedData = Object.entries(userData)
        .map(([key, value]) => `${key}: ${value || 'Belirtilmemi≈ü'}`)
        .join('\n');

      Alert.alert(
        'Ki≈üisel Verileriniz',
        formattedData,
        [
          { text: 'Kapat', style: 'cancel' },
          { 
            text: 'Kopyala', 
            onPress: () => {
              // For web, try to copy to clipboard
              if (Platform.OS === 'web' && navigator.clipboard) {
                navigator.clipboard.writeText(formattedData)
                  .then(() => Alert.alert('Ba≈üarƒ±lƒ±', 'Verileriniz panoya kopyalandƒ±!'))
                  .catch(() => Alert.alert('Bilgi', 'Verileriniz yukarƒ±da g√∂r√ºnt√ºleniyor'));
              } else {
                Alert.alert('Bilgi', 'Verileriniz yukarƒ±da g√∂r√ºnt√ºleniyor');
              }
            }
          }
        ]
      );
    } catch (error) {
      console.error('Error downloading data:', error);
      const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen hata';
      Alert.alert('Hata', `Veri indirilirken hata olu≈ütu: ${errorMessage}`);
    }
  };

  // √únvan kƒ±saltmalarƒ±
  const getTitleAbbreviation = (branch: string) => {
    const abbreviations: Record<string, string> = {
      'Doktor': 'Dr.',
      'Di≈ü Hekimi': 'Dt.',
      'Eczacƒ±': 'Ecz.',
      'Hem≈üire': 'Hem≈üire',
      'Fizyoterapi ve Rehabilitasyon': 'Fzt.',
      'Ebe': 'Ebe',
      'ƒ∞lk ve Acil Yardƒ±m Teknikeri': 'Prm.',
      'Paramedik': 'Prm.',
      'Anestezi Teknikeri': 'Anest. Tekn.',
      'Anestezist': 'Anest.',
      'Ameliyathane Teknisyeni': 'Amel. Tekn.',
      'Tƒ±bbi G√∂r√ºnt√ºleme Teknisyeni': 'Rad. Tekn.',
      'Tƒ±bbi Laboratuvar Teknisyeni': 'Lab. Tekn.',
      'Diyaliz Teknisyeni': 'Diy. Tekn.',
      'Optisyen': 'Opt.',
      'Odyolog': 'Ody.',
      'Radyoterapi Teknisyeni': 'Radyoter. Tekn.',
      '√áocuk Geli≈üimi Uzmanƒ±': '√áoc. Gel. Uzm.',
      'Ya≈ülƒ± Bakƒ±m Teknisyeni': 'Ya≈ülƒ± Bak. Tekn.',
      'Tƒ±bbi Sekreter': 'Tƒ±bbi Sek.',
      'Perf√ºzyon Teknisyeni': 'Perf. Tekn.',
      'Acil Tƒ±p Teknisyeni': 'Acil Tƒ±p Tekn.',
      'Diyetisyen': 'Dyt.',
      'Beslenme ve Diyetetik': 'Dyt.',
    };
    
    return abbreviations[branch] || branch;
  };

  // Tam isim formatƒ±
  const getFormattedName = (firstName: string, lastName: string, branch: string) => {
    return `${firstName} ${lastName.toUpperCase()}`;
  };

  const settingsOptions = [
    {
      id: 'edit',
      title: 'Profili D√ºzenle',
      icon: Edit,
      onPress: () => setShowEditModal(true),
    },
    {
      id: 'photo',
      title: 'Profil Fotoƒürafƒ±nƒ± Deƒüi≈ütir',
      icon: Camera,
      onPress: handleImagePicker,
    },
    {
      id: 'password',
      title: '≈ûifre Deƒüi≈ütir',
      icon: Key,
      onPress: () => setShowPasswordModal(true),
    },
    {
      id: 'data',
      title: 'Verilerimi ƒ∞ndir',
      icon: Download,
      onPress: downloadUserData,
    },
    {
      id: 'privacy',
      title: 'Gizlilik Politikasƒ±',
      icon: Shield,
      onPress: () => router.push('/privacy-policy'),
    },
    {
      id: 'terms',
      title: 'Kullanƒ±m ≈ûartlarƒ±',
      icon: FileText,
      onPress: () => router.push('/terms-of-service'),
    },
    {
      id: 'about',
      title: 'Hakkƒ±mƒ±zda',
      icon: Users,
      onPress: () => setShowAboutModal(true),
    },
    {
      id: 'notifications',
      title: 'Bildirim Ayarlarƒ±',
      icon: Settings,
      onPress: () => router.push('/notification-settings'),
    },
    {
      id: 'logout',
      title: '√áƒ±kƒ±≈ü Yap',
      icon: LogOut,
      onPress: () => {
        Alert.alert(
          '√áƒ±kƒ±≈ü Yap',
          'Hesabƒ±nƒ±zdan √ßƒ±kƒ±≈ü yapmak istediƒüinizden emin misiniz?',
          [
            { text: 'ƒ∞ptal', style: 'cancel' },
            { 
              text: '√áƒ±kƒ±≈ü Yap', 
              style: 'destructive',
              onPress: async () => {
                try {
                  console.log('Signing out...');
                  await signOut();
                  console.log('Sign out completed, redirecting...');
                  router.replace('/auth/login');
                } catch (error) {
                  console.error('Logout error:', error);
                  // Force redirect even on error
                  router.replace('/auth/login');
                }
              }
            }
          ]
        );
      },
    },
    {
      id: 'freeze',
      title: 'Hesabƒ±mƒ± Dondur',
      icon: Snowflake,
      onPress: handleFreezeAccount,
      danger: true,
    },
    {
      id: 'delete',
      title: 'Hesabƒ± Sil',
      icon: Trash2,
      onPress: handleDeleteAccount,
      danger: true,
    },
  ];

  return (
    <SafeAreaView style={styles.container}>
      {/* Header */}
      <View style={styles.header}>
        <View style={styles.logoContainer}>
          <View style={styles.logoContainerInner}>
            <Image 
              source={require('@/assets/images/logo.png')} 
              style={styles.logoImage}
              resizeMode="contain"
            />
          </View>
        </View>
        <Text style={styles.headerTitle}>Profil</Text>
        <TouchableOpacity 
          style={styles.settingsButton}
          onPress={() => setShowSettings(!showSettings)}
          activeOpacity={0.7}
        >
          <Settings size={20} color="#FFFFFF" />
        </TouchableOpacity>
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        {/* Settings Menu */}
        {showSettings && (
          <View style={styles.settingsMenu}>
            <Text style={styles.settingsTitle}>Ayarlar</Text>
            {settingsOptions.map((option) => (
              <TouchableOpacity
                key={option.id}
                style={[
                  styles.settingsOption,
                  option.danger && styles.dangerOption,
                ]}
                onPress={option.onPress}
                activeOpacity={0.7}
                accessible={true}
                accessibilityRole="button"
              >
                {(() => {
                  const IconComponent = option.icon;
                  return (
                    <IconComponent 
                      size={20} 
                      color={option.danger ? '#DC2626' : '#374151'} 
                    />
                  );
                })()}
                <Text 
                  style={[
                    styles.settingsOptionText,
                    option.danger && styles.dangerText,
                  ]}
                >
                  {option.title}
                </Text>
              </TouchableOpacity>
            ))}
          </View>
        )}

        {/* Profile Card - Role-based styling */}
        {currentUserData?.role === 'admin' ? (
          <View style={[styles.adminProfileCard, showSettings && styles.profileCardShifted]}>
            {/* Admin Crown Header */}
            <View style={styles.adminCrownHeader}>
              <View style={styles.adminCrown}>
                <Text style={styles.adminCrownText}>üëë</Text>
              </View>
              <Text style={styles.adminHeaderText}>Y√ñNETƒ∞Cƒ∞</Text>
            </View>
            
            <Image
              source={{
                uri: currentUserData?.avatar_url || userProfile.avatar
              }}
              style={styles.adminAvatar}
            />
            <View style={styles.adminProfileInfo}>
              <Text style={styles.adminProfileName}>
                {currentUserData ? 
                  `${currentUserData.first_name} ${currentUserData.last_name.toUpperCase()}` : 
                  userProfile.name}
              </Text>
              <Text style={styles.adminProfileTitle}>
                {currentUserData?.branch || userProfile.title}
              </Text>
              
              {/* Admin Status */}
              <View style={styles.adminStatusBadge}>
                <Shield size={16} color="#FFFFFF" />
                <Text style={styles.adminStatusText}>S√úPER Y√ñNETƒ∞Cƒ∞</Text>
              </View>
              
              <View style={styles.adminLocationInfo}>
                <Building size={16} color="#FFFFFF" />
                <Text style={styles.adminInstitution}>
                  {currentUserData?.institution || userProfile.institution}
                </Text>
              </View>
              <View style={styles.adminLocationInfo}>
                <MapPin size={16} color="#FFFFFF" />
                <Text style={styles.adminCity}>
                  {currentUserData?.city || userProfile.city}
                </Text>
              </View>
              
              {/* Admin Powers */}
              <View style={styles.adminPowersSection}>
                <Text style={styles.adminPowersTitle}>YETKƒ∞LER</Text>
                <View style={styles.adminPowersList}>
                  <Text style={styles.adminPowerItem}>‚Ä¢ T√ºm kullanƒ±cƒ±larƒ± y√∂netebilir</Text>
                  <Text style={styles.adminPowerItem}>‚Ä¢ Sistem ayarlarƒ±nƒ± deƒüi≈ütirebilir</Text>
                  <Text style={styles.adminPowerItem}>‚Ä¢ Moderator atayabilir</Text>
                  <Text style={styles.adminPowerItem}>‚Ä¢ T√ºm i√ßerikleri silebilir</Text>
                </View>
              </View>
            </View>
          </View>
        ) : currentUserData?.role === 'moderator' ? (
          <View style={[styles.moderatorProfileCard, showSettings && styles.profileCardShifted]}>
            {/* Moderator Shield Header */}
            <View style={styles.moderatorShieldHeader}>
              <View style={styles.moderatorShield}>
                <Shield size={20} color="#059669" />
              </View>
              <Text style={styles.moderatorHeaderText}>MODERAT√ñR</Text>
            </View>
            
            <Image
              source={{
                uri: currentUserData?.avatar_url || userProfile.avatar
              }}
              style={styles.moderatorAvatar}
            />
            <View style={styles.moderatorProfileInfo}>
              <Text style={styles.moderatorProfileName}>
                {currentUserData ? 
                  `${currentUserData.first_name} ${currentUserData.last_name.toUpperCase()}` : 
                  userProfile.name}
              </Text>
              <Text style={styles.moderatorProfileTitle}>
                {currentUserData?.branch || userProfile.title}
              </Text>
              
              {/* Moderator Status */}
              <View style={styles.moderatorStatusBadge}>
                <Shield size={14} color="#FFFFFF" />
                <Text style={styles.moderatorStatusText}>MODERAT√ñR</Text>
              </View>
              
              <View style={styles.moderatorLocationInfo}>
                <Building size={16} color="#059669" />
                <Text style={styles.moderatorInstitution}>
                  {currentUserData?.institution || userProfile.institution}
                </Text>
              </View>
              <View style={styles.moderatorLocationInfo}>
                <MapPin size={16} color="#059669" />
                <Text style={styles.moderatorCity}>
                  {currentUserData?.city || userProfile.city}
                </Text>
              </View>
              
              {/* Moderator Powers */}
              <View style={styles.moderatorPowersSection}>
                <Text style={styles.moderatorPowersTitle}>YETKƒ∞LER</Text>
                <View style={styles.moderatorPowersList}>
                  <Text style={styles.moderatorPowerItem}>‚Ä¢ Mesajlarƒ± y√∂netebilir</Text>
                  <Text style={styles.moderatorPowerItem}>‚Ä¢ Kullanƒ±cƒ±larƒ± engelleyebilir</Text>
                  <Text style={styles.moderatorPowerItem}>‚Ä¢ ƒ∞√ßerikleri silebilir</Text>
                </View>
              </View>
            </View>
          </View>
        ) : (
          <View style={[styles.profileCard, showSettings && styles.profileCardShifted]}>
            <TouchableOpacity onPress={handleImagePicker}>
              <Image
                source={{
                  uri: currentUserData?.avatar_url || userProfile.avatar
                }}
                style={styles.avatar}
              />
            </TouchableOpacity>
            <View style={styles.profileInfo}>
              <Text style={styles.profileName}>
                {currentUserData ? 
                  `${currentUserData.first_name} ${currentUserData.last_name.toUpperCase()}` : 
                  userProfile.name}
              </Text>
              <Text style={styles.profileTitleRed}>
                {currentUserData?.branch || userProfile.title}
              </Text>
              <View style={styles.locationInfo}>
                <Building size={16} color="#6B7280" />
                <Text style={styles.institution}>
                  {currentUserData?.institution || userProfile.institution}
                </Text>
              </View>
              <View style={styles.locationInfo}>
                <MapPin size={16} color="#6B7280" />
                <Text style={styles.city}>
                  {currentUserData?.city || userProfile.city}
                </Text>
              </View>
            </View>
          </View>
        )}

        {/* CV/√ñzge√ßmi≈ü Button */}
        <TouchableOpacity 
          style={styles.cvButton}
          onPress={() => router.push('/cv-builder')}
          activeOpacity={0.7}
        >
          <FileText size={20} color="#FFFFFF" />
          <Text style={styles.cvButtonText}>CV / √ñzge√ßmi≈ü</Text>
        </TouchableOpacity>

        {/* Stats */}
        <View style={styles.statsContainer}>
          <TouchableOpacity 
            style={styles.statItem}
            onPress={() => router.push('/friends-list')}
            activeOpacity={0.7}
            onLongPress={fetchCounts}
          >
            <Text style={styles.statNumber}>{friendCount}</Text>
            <Text style={styles.statLabel}>Arkada≈ü</Text>
          </TouchableOpacity>
          <View style={styles.statDivider} />
          <TouchableOpacity 
            style={styles.statItem}
            onPress={() => router.push('/my-posts')}
            activeOpacity={0.7}
            onLongPress={fetchCounts}
          >
            <Text style={styles.statNumber}>{postsCount}</Text>
            <Text style={styles.statLabel}>Payla≈üƒ±m</Text>
          </TouchableOpacity>
          <View style={styles.statDivider} />
          <TouchableOpacity 
            style={styles.statItem}
            onPress={() => router.push('/my-job-applications')}
            activeOpacity={0.7}
            onLongPress={fetchCounts}
          >
            <Text style={styles.statNumber}>{applicationsCount}</Text>
            <Text style={styles.statLabel}>Ba≈üvuru</Text>
          </TouchableOpacity>
        </View>

        {/* About Section */}
        <View style={styles.aboutSection}>
          <Text style={styles.sectionTitle}>Hakkƒ±nda</Text>
          <Text style={styles.aboutText}>
            {currentUserData?.about || userProfile.about}
          </Text>
        </View>

        {/* CV/√ñzge√ßmi≈ü Button */}
        <View style={styles.recentPosts}>
          <Text style={styles.sectionTitle}>Ki≈üi Prospekt√ºs√º</Text>
          <View style={styles.postItem}>
            <Text style={styles.postTitle}>Acil M√ºdahale Protokol√º</Text>
            <Text style={styles.postContent}>
              Kardiyopulmoner res√ºsitasyon sƒ±rasƒ±nda dikkat edilmesi gereken temel prensipler...
            </Text>
            <Text style={styles.postTime}>2 saat √∂nce</Text>
          </View>
          <View style={styles.postItem}>
            <Text style={styles.postTitle}>Soru: IV Kateter Boyutu</Text>
            <Text style={styles.postContent}>
              Pediatrik hastalarda hangi boyut IV kateter kullanƒ±yorsunuz?
            </Text>
            <Text style={styles.postTime}>1 g√ºn √∂nce</Text>
          </View>
        </View>
      </ScrollView>

      {/* Edit Profile Modal */}
      <Modal visible={showEditModal} animationType="slide" presentationStyle="pageSheet">
        <SafeAreaView style={styles.modalContainer}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Profili D√ºzenle</Text>
            <TouchableOpacity onPress={() => setShowEditModal(false)}>
              <Text style={styles.modalCloseText}>ƒ∞ptal</Text>
            </TouchableOpacity>
          </View>
          <ScrollView style={styles.modalContent}>
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Ad</Text>
              <View style={styles.lockedInputContainer}>
                <TextInput
                  style={[styles.modalInput, styles.lockedInput]}
                  value={editForm.first_name}
                  editable={false}
                  placeholder="Adƒ±nƒ±z"
                />
                <View style={styles.lockIcon}>
                  <Text style={styles.lockText}>üîí</Text>
                </View>
              </View>
              <Text style={styles.inputHint}>Ad deƒüi≈ütirilemez</Text>
            </View>
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Soyad</Text>
              <View style={styles.lockedInputContainer}>
                <TextInput
                  style={[styles.modalInput, styles.lockedInput]}
                  value={editForm.last_name}
                  editable={false}
                  placeholder="Soyadƒ±nƒ±z"
                />
                <View style={styles.lockIcon}>
                  <Text style={styles.lockText}>üîí</Text>
                </View>
              </View>
              <Text style={styles.inputHint}>Soyad deƒüi≈ütirilemez</Text>
            </View>
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Bran≈ü</Text>
              <View style={styles.lockedInputContainer}>
                <TextInput
                  style={[styles.modalInput, styles.lockedInput]}
                  value={currentUserData?.branch || ''}
                  editable={false}
                  placeholder="Bran≈üƒ±nƒ±z"
                />
                <View style={styles.lockIcon}>
                  <Text style={styles.lockText}>üîí</Text>
                </View>
              </View>
              <Text style={styles.inputHint}>Bran≈ü deƒüi≈ütirilemez</Text>
            </View>
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>E-posta Adresi</Text>
              <View style={styles.lockedInputContainer}>
                <TextInput
                  style={[styles.modalInput, styles.lockedInput]}
                  value={currentUserData?.email || ''}
                  editable={false}
                  placeholder="E-posta adresi"
                />
                <View style={styles.lockIcon}>
                  <Text style={styles.lockText}>üîí</Text>
                </View>
              </View>
              <Text style={styles.inputHint}>E-posta adresi deƒüi≈ütirilemez</Text>
            </View>
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>≈ûehir</Text>
              <TextInput
                style={styles.modalInput}
                value={editForm.city}
                onChangeText={(text) => setEditForm({...editForm, city: text})}
                placeholder="√áalƒ±≈ütƒ±ƒüƒ±nƒ±z ≈üehir"
              />
            </View>
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Kurum</Text>
              <TextInput
                style={styles.modalInput}
                value={editForm.institution}
                onChangeText={(text) => setEditForm({...editForm, institution: text})}
                placeholder="√áalƒ±≈ütƒ±ƒüƒ±nƒ±z kurum"
              />
            </View>
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Hakkƒ±nda</Text>
              <TextInput
                style={[styles.modalInput, styles.textArea]}
                value={editForm.about}
                onChangeText={(text) => setEditForm({...editForm, about: text})}
                placeholder="Kendiniz hakkƒ±nda bilgi"
                multiline
                numberOfLines={4}
              />
            </View>
            <TouchableOpacity style={styles.saveButton} onPress={handleEditProfile}>
              <Text style={styles.saveButtonText}>Kaydet</Text>
            </TouchableOpacity>
          </ScrollView>
        </SafeAreaView>
      </Modal>

      {/* Change Password Modal */}
      <Modal visible={showPasswordModal} animationType="slide" presentationStyle="pageSheet">
        <SafeAreaView style={styles.modalContainer}>
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>≈ûifre Deƒüi≈ütir</Text>
            <TouchableOpacity onPress={() => setShowPasswordModal(false)}>
              <Text style={styles.modalCloseText}>ƒ∞ptal</Text>
            </TouchableOpacity>
          </View>
          <ScrollView style={styles.modalContent}>
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Mevcut ≈ûifre</Text>
              <TextInput
                style={styles.modalInput}
                value={passwordForm.currentPassword}
                onChangeText={(text) => setPasswordForm({...passwordForm, currentPassword: text})}
                placeholder="Mevcut ≈üifreniz"
                secureTextEntry
              />
            </View>
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Yeni ≈ûifre</Text>
              <TextInput
                style={styles.modalInput}
                value={passwordForm.newPassword}
                onChangeText={(text) => setPasswordForm({...passwordForm, newPassword: text})}
                placeholder="Yeni ≈üifreniz"
                secureTextEntry
              />
            </View>
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Yeni ≈ûifre Tekrar</Text>
              <TextInput
                style={styles.modalInput}
                value={passwordForm.confirmPassword}
                onChangeText={(text) => setPasswordForm({...passwordForm, confirmPassword: text})}
                placeholder="Yeni ≈üifrenizi tekrar girin"
                secureTextEntry
              />
            </View>
            <TouchableOpacity style={styles.saveButton} onPress={handleChangePassword}>
              <Text style={styles.saveButtonText}>≈ûifreyi Deƒüi≈ütir</Text>
            </TouchableOpacity>
          </ScrollView>
        </SafeAreaView>
      </Modal>

      {/* About Us Modal */}
      <Modal
        visible={showAboutModal}
        animationType="slide"
        presentationStyle="pageSheet"
        onRequestClose={() => setShowAboutModal(false)}
      >
        <SafeAreaView style={styles.aboutModalContainer}>
          <View style={styles.aboutModalHeader}>
            <Text style={styles.aboutModalTitle}>Kariyer Saƒülƒ±k Hakkƒ±nda</Text>
            <TouchableOpacity
              style={styles.aboutModalCloseButton}
              onPress={() => setShowAboutModal(false)}
            >
              <Text style={styles.aboutModalCloseText}>‚úï</Text>
            </TouchableOpacity>
          </View>
          
          <ScrollView style={styles.aboutModalContent} showsVerticalScrollIndicator={false}>
            <View style={styles.aboutLogoContainer}>
              <Image 
                source={require('@/assets/images/logo.png')} 
                style={styles.aboutLogo}
                resizeMode="contain"
              />
            </View>
            
            <Text style={styles.aboutMainText}>
              Kariyer Saƒülƒ±k, saƒülƒ±k profesyonelleri ve √∂ƒürenciler i√ßin geli≈ütirilmi≈ü modern bir mobil platformdur.
            </Text>
            
            <Text style={styles.aboutSubText}>
              Amacƒ±mƒ±z; saƒülƒ±k √ßalƒ±≈üanlarƒ±nƒ± tek bir dijital √ßatƒ± altƒ±nda bulu≈üturmak, g√ºvenilir i≈ü ilanlarƒ±na eri≈üim saƒülamak, bran≈ülara √∂zel sohbet odalarƒ±yla mesleki dayanƒ±≈ümayƒ± g√º√ßlendirmek ve √ßevrimdƒ±≈üƒ± ila√ß prospekt√ºsleri ile tedavi algoritmalarƒ±na her an eri≈üim sunmaktƒ±r.
            </Text>
            
            <Text style={styles.aboutSubText}>
              Uygulama; i≈ü ilanlarƒ±, profesyonel sohbet odalarƒ±, ki≈üisel profiller, arkada≈ülƒ±k & mesajla≈üma sistemi ve payla≈üƒ±m alanlarƒ±yla saƒülƒ±k alanƒ±nda kapsamlƒ± bir kariyer ve ileti≈üim aƒüƒ± olu≈üturur.
            </Text>
            
            <View style={styles.aboutContactContainer}>
              <Text style={styles.aboutContactTitle}>üì© Destek i√ßin:</Text>
              <TouchableOpacity 
                onPress={() => Linking.openURL('mailto:kariyersaglik@outlook.com')}
                activeOpacity={0.7}
              >
                <Text style={styles.aboutContactEmail}>kariyersaglik@outlook.com</Text>
              </TouchableOpacity>
              
              <Text style={styles.aboutContactTitle}>üì∑ Instagram:</Text>
              <TouchableOpacity 
                onPress={() => Linking.openURL('https://www.instagram.com/kariyer.saglik/')}
                activeOpacity={0.7}
              >
                <Text style={styles.aboutContactInstagram}>@kariyer.saglik</Text>
              </TouchableOpacity>
            </View>
            
            <View style={styles.aboutTaglineContainer}>
              <Text style={styles.aboutTagline}>
                Kariyer Saƒülƒ±k ‚Äì Saƒülƒ±kta kariyer, burada ba≈ülar.
              </Text>
            </View>
            
            <View style={styles.feedbackCard}>
              <View style={styles.feedbackHeader}>
                <Text style={styles.feedbackIcon}>üí¨</Text>
                <Text style={styles.feedbackTitle}>Geri Bildirim</Text>
              </View>
              <Text style={styles.feedbackDescription}>
                Uygulamamƒ±zƒ± geli≈ütirmek i√ßin g√∂r√º≈üleriniz bizim i√ßin √ßok deƒüerli. 
                Deneyimlerinizi, √∂nerilerinizi ve geri bildirimlerinizi bizimle payla≈üƒ±n.
              </Text>
              <TouchableOpacity 
                style={styles.feedbackButton}
                onPress={() => setShowFeedbackModal(true)}
                activeOpacity={0.8}
              >
                <Text style={styles.feedbackButtonText}>Geri Bildirim G√∂nder</Text>
              </TouchableOpacity>
            </View>
          </ScrollView>
        </SafeAreaView>
      </Modal>

      {/* Feedback Modal */}
      <Modal
        visible={showFeedbackModal}
        animationType="slide"
        presentationStyle="pageSheet"
        onRequestClose={() => setShowFeedbackModal(false)}
      >
        <SafeAreaView style={styles.feedbackModalContainer}>
          <View style={styles.feedbackModalHeader}>
            <Text style={styles.feedbackModalTitle}>Geri Bildirim G√∂nder</Text>
            <TouchableOpacity
              style={styles.feedbackModalCloseButton}
              onPress={() => setShowFeedbackModal(false)}
            >
              <Text style={styles.feedbackModalCloseText}>‚úï</Text>
            </TouchableOpacity>
          </View>
          
          <ScrollView style={styles.feedbackModalContent} showsVerticalScrollIndicator={false}>
            <View style={styles.feedbackFormContainer}>
              <Text style={styles.feedbackLabel}>Konu *</Text>
              <TextInput
                style={styles.feedbackInput}
                placeholder="Geri bildiriminizin konusunu yazƒ±n"
                value={feedbackForm.subject}
                onChangeText={(text) => setFeedbackForm(prev => ({ ...prev, subject: text }))}
                maxLength={100}
              />
              
              <Text style={styles.feedbackLabel}>Geri Bildirim T√ºr√º</Text>
              <View style={styles.feedbackTypeContainer}>
                {[
                  { key: 'general', label: 'Genel', icon: 'üí¨' },
                  { key: 'bug_report', label: 'Hata Bildirimi', icon: 'üêõ' },
                  { key: 'feature_request', label: '√ñzellik ƒ∞steƒüi', icon: 'üí°' },
                  { key: 'complaint', label: '≈ûikayet', icon: 'üòû' },
                  { key: 'compliment', label: '√ñvg√º', icon: 'üòä' },
                ].map((type) => (
                  <TouchableOpacity
                    key={type.key}
                    style={[
                      styles.feedbackTypeOption,
                      feedbackForm.feedback_type === type.key && styles.feedbackTypeOptionSelected
                    ]}
                    onPress={() => setFeedbackForm(prev => ({ ...prev, feedback_type: type.key }))}
                  >
                    <Text style={styles.feedbackTypeIcon}>{type.icon}</Text>
                    <Text style={[
                      styles.feedbackTypeText,
                      feedbackForm.feedback_type === type.key && styles.feedbackTypeTextSelected
                    ]}>
                      {type.label}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
              
              <Text style={styles.feedbackLabel}>Deƒüerlendirme</Text>
              <View style={styles.ratingContainer}>
                {[1, 2, 3, 4, 5].map((star) => (
                  <TouchableOpacity
                    key={star}
                    onPress={() => setFeedbackForm(prev => ({ ...prev, rating: star }))}
                    style={styles.starButton}
                  >
                    <Text style={[
                      styles.star,
                      star <= feedbackForm.rating ? styles.starFilled : styles.starEmpty
                    ]}>
                      ‚≠ê
                    </Text>
                  </TouchableOpacity>
                ))}
                <Text style={styles.ratingText}>
                  {feedbackForm.rating === 1 && '√áok K√∂t√º'}
                  {feedbackForm.rating === 2 && 'K√∂t√º'}
                  {feedbackForm.rating === 3 && 'Orta'}
                  {feedbackForm.rating === 4 && 'ƒ∞yi'}
                  {feedbackForm.rating === 5 && 'M√ºkemmel'}
                </Text>
              </View>
              
              <Text style={styles.feedbackLabel}>Mesaj *</Text>
              <TextInput
                style={[styles.feedbackInput, styles.feedbackTextArea]}
                placeholder="Geri bildiriminizi detaylƒ± olarak yazƒ±n..."
                value={feedbackForm.message}
                onChangeText={(text) => setFeedbackForm(prev => ({ ...prev, message: text }))}
                multiline
                numberOfLines={6}
                textAlignVertical="top"
                maxLength={1000}
              />
              <Text style={styles.characterCount}>
                {feedbackForm.message.length}/1000 karakter
              </Text>
            </View>
          </ScrollView>
          
          <View style={styles.feedbackModalFooter}>
            <TouchableOpacity
              style={styles.feedbackCancelButton}
              onPress={() => setShowFeedbackModal(false)}
            >
              <Text style={styles.feedbackCancelButtonText}>ƒ∞ptal</Text>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.feedbackSubmitButton, submittingFeedback && styles.feedbackSubmitButtonDisabled]}
              onPress={handleSubmitFeedback}
              disabled={submittingFeedback}
            >
              <Text style={styles.feedbackSubmitButtonText}>
                {submittingFeedback ? 'G√∂nderiliyor...' : 'G√∂nder'}
              </Text>
            </TouchableOpacity>
          </View>
        </SafeAreaView>
      </Modal>

      {/* Reklam Banner - Alt navigasyonun √ºst√ºnde */}
      <View style={styles.bannerContainer}>
        <AdvertisementBanner 
          onPress={() => {
            // Reklam tƒ±klama i≈ülemi
            console.log('Reklam banner\'ƒ±na tƒ±klandƒ±');
          }}
        />
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  header: {
    backgroundColor: '#EF4444',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 16,
    paddingTop: 48,
    paddingBottom: 24,
    borderBottomLeftRadius: 50,
    borderBottomRightRadius: 50,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 10,
    },
    shadowOpacity: 0.3,
    shadowRadius: 18,
    elevation: 12,
    overflow: 'hidden',
  },
  logoContainer: {
    width: 100,
    height: 100,
    borderRadius: 50,
    alignItems: 'center',
    justifyContent: 'center',
  },
  logoContainerInner: {
    width: 100,
    height: 100,
    borderRadius: 50,
    alignItems: 'center',
    justifyContent: 'center',
  },
  logoImage: {
    width: '100%',
    height: '100%',
    maxWidth: 100,
    maxHeight: 100,
  },
  logoPlaceholder: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  logoText: {
    fontSize: 12,
    fontWeight: '700',
    color: '#111827',
  },
  logoTextAccent: {
    fontSize: 12,
    fontWeight: '700',
    color: '#EF4444',
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#FFFFFF',
    flex: 1,
    textAlign: 'center',
  },
  settingsButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    alignItems: 'center',
    justifyContent: 'center',
  },
  content: {
    flex: 1,
    paddingHorizontal: 16,
  },
  profileCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 20,
    marginTop: 16,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  profileCardShifted: {
    marginTop: 0,
  },
  avatar: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 16,
  },
  profileInfo: {
    alignItems: 'center',
  },
  profileName: {
    fontSize: 24,
    fontWeight: '700',
    color: '#111827',
    marginBottom: 4,
  },
  profileTitle: {
    fontSize: 16,
    fontWeight: '500',
    color: '#6B7280',
    marginBottom: 8,
  },
  profileTitleRed: {
    fontSize: 16,
    fontWeight: '600',
    color: '#EF4444',
    marginBottom: 8,
    textAlign: 'center',
  },
  locationInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 4,
  },
  institution: {
    fontSize: 14,
    color: '#6B7280',
    marginLeft: 6,
  },
  city: {
    fontSize: 14,
    color: '#6B7280',
    marginLeft: 6,
  },
  cvButton: {
    backgroundColor: '#7C3AED',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: 16,
    paddingVertical: 16,
    marginTop: 16,
    marginHorizontal: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.15,
    shadowRadius: 12,
    elevation: 8,
  },
  cvButtonText: {
    fontSize: 16,
    fontWeight: '700',
    color: '#FFFFFF',
    marginLeft: 8,
    letterSpacing: 0.5,
  },
  statsContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    marginTop: 16,
    flexDirection: 'row',
    paddingVertical: 20,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  statItem: {
    flex: 1,
    alignItems: 'center',
  },
  statNumber: {
    fontSize: 24,
    fontWeight: '700',
    color: '#EF4444',
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 14,
    color: '#6B7280',
    fontWeight: '500',
  },
  statDivider: {
    width: 1,
    backgroundColor: '#E5E7EB',
    marginHorizontal: 16,
  },
  aboutSection: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 20,
    marginTop: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#111827',
    marginBottom: 12,
  },
  aboutText: {
    fontSize: 14,
    color: '#6B7280',
    lineHeight: 20,
  },
  friendsButton: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    padding: 16,
    marginTop: 16,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 2,
    borderColor: '#EF4444',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  friendsButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#EF4444',
    marginLeft: 8,
  },
  settingsMenu: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    marginTop: 8,
    marginBottom: 8,
    paddingVertical: 8,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  settingsTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#111827',
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  settingsOption: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    minHeight: 48,
    backgroundColor: 'transparent',
  },
  settingsOptionText: {
    fontSize: 16,
    color: '#374151',
    marginLeft: 12,
    fontWeight: '500',
  },
  dangerOption: {
    borderTopWidth: 1,
    borderTopColor: '#E5E7EB',
  },
  dangerText: {
    color: '#DC2626',
  },
  recentPosts: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 20,
    marginTop: 16,
    marginBottom: 32,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  postItem: {
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  postTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#111827',
    marginBottom: 4,
  },
  postContent: {
    fontSize: 14,
    color: '#6B7280',
    lineHeight: 18,
    marginBottom: 6,
  },
  postTime: {
    fontSize: 12,
    color: '#9CA3AF',
  },
  roleBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    marginTop: 8,
    alignSelf: 'center',
  },
  adminRoleBadge: {
    backgroundColor: '#DC2626',
  },
  moderatorRoleBadge: {
    backgroundColor: '#059669',
  },
  roleBadgeText: {
    fontSize: 12,
    color: '#FFFFFF',
    fontWeight: '600',
    marginLeft: 4,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  modalHeader: {
    backgroundColor: '#EF4444',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 16,
    paddingTop: 48,
    borderBottomLeftRadius: 24,
    borderBottomRightRadius: 24,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  modalCloseText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  modalContent: {
    flex: 1,
    padding: 16,
  },
  inputContainer: {
    marginBottom: 16,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#111827',
    marginBottom: 8,
  },
  modalInput: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    color: '#111827',
  },
  textArea: {
    minHeight: 100,
    textAlignVertical: 'top',
  },
  lockedInputContainer: {
    position: 'relative',
  },
  lockedInput: {
    backgroundColor: '#F3F4F6',
    color: '#6B7280',
    paddingRight: 40,
  },
  lockIcon: {
    position: 'absolute',
    right: 12,
    top: 12,
    bottom: 12,
    justifyContent: 'center',
  },
  lockText: {
    fontSize: 16,
  },
  inputHint: {
    fontSize: 12,
    color: '#6B7280',
    marginTop: 4,
    fontStyle: 'italic',
  },
  saveButton: {
    backgroundColor: '#EF4444',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
    marginTop: 24,
  },
  saveButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  // About Modal Styles
  aboutModalContainer: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  aboutModalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
    backgroundColor: '#F9FAFB',
  },
  aboutModalTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#111827',
    flex: 1,
    textAlign: 'center',
  },
  aboutModalCloseButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#EF4444',
    alignItems: 'center',
    justifyContent: 'center',
  },
  aboutModalCloseText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  aboutModalContent: {
    flex: 1,
    paddingHorizontal: 20,
    paddingVertical: 24,
  },
  aboutLogoContainer: {
    alignItems: 'center',
    marginBottom: 32,
  },
  aboutLogo: {
    width: 80,
    height: 80,
  },
  aboutMainText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#111827',
    lineHeight: 28,
    marginBottom: 20,
    textAlign: 'center',
  },
  aboutSubText: {
    fontSize: 16,
    fontWeight: '400',
    color: '#374151',
    lineHeight: 24,
    marginBottom: 16,
    textAlign: 'justify',
  },
  aboutContactContainer: {
    backgroundColor: '#F9FAFB',
    borderRadius: 12,
    padding: 16,
    marginVertical: 20,
  },
  aboutContactTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#111827',
    marginBottom: 8,
    marginTop: 12,
  },
  aboutContactEmail: {
    fontSize: 15,
    fontWeight: '500',
    color: '#EF4444',
    marginBottom: 4,
    textDecorationLine: 'underline',
  },
  aboutContactInstagram: {
    fontSize: 15,
    fontWeight: '500',
    color: '#EF4444',
    textDecorationLine: 'underline',
  },
  feedbackCard: {
    backgroundColor: '#F8FAFC',
    borderRadius: 16,
    padding: 20,
    marginTop: 15,
    borderWidth: 1,
    borderColor: '#E2E8F0',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.05,
    shadowRadius: 8,
    elevation: 2,
  },
  feedbackHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  feedbackIcon: {
    fontSize: 24,
    marginRight: 12,
  },
  feedbackTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#1F2937',
  },
  feedbackDescription: {
    fontSize: 14,
    lineHeight: 20,
    color: '#6B7280',
    marginBottom: 16,
  },
  feedbackButton: {
    backgroundColor: '#EF4444',
    borderRadius: 12,
    paddingVertical: 12,
    paddingHorizontal: 20,
    alignItems: 'center',
    shadowColor: '#EF4444',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 3,
  },
  feedbackButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  aboutTaglineContainer: {
    backgroundColor: '#EF4444',
    borderRadius: 12,
    padding: 20,
    marginTop: 15,
    marginBottom: 10,
    alignItems: 'center',
  },
  aboutTagline: {
    fontSize: 16,
    fontWeight: '700',
    color: '#FFFFFF',
    textAlign: 'center',
    lineHeight: 24,
  },
  // Feedback Modal Styles
  feedbackModalContainer: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  feedbackModalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#EF4444',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  feedbackModalTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#FFFFFF',
  },
  feedbackModalCloseButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    alignItems: 'center',
    justifyContent: 'center',
  },
  feedbackModalCloseText: {
    fontSize: 16,
    color: '#FFFFFF',
    fontWeight: '600',
  },
  feedbackModalContent: {
    flex: 1,
    paddingHorizontal: 20,
  },
  feedbackFormContainer: {
    paddingVertical: 20,
  },
  feedbackLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 8,
    marginTop: 16,
  },
  feedbackInput: {
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    color: '#111827',
  },
  feedbackTextArea: {
    height: 120,
    textAlignVertical: 'top',
  },
  feedbackTypeContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  feedbackTypeOption: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: '#F3F4F6',
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  feedbackTypeOptionSelected: {
    backgroundColor: '#EF4444',
    borderColor: '#EF4444',
  },
  feedbackTypeIcon: {
    fontSize: 16,
    marginRight: 6,
  },
  feedbackTypeText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#6B7280',
  },
  feedbackTypeTextSelected: {
    color: '#FFFFFF',
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  starButton: {
    padding: 4,
  },
  star: {
    fontSize: 24,
  },
  starFilled: {
    color: '#FCD34D',
  },
  starEmpty: {
    color: '#D1D5DB',
  },
  ratingText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#6B7280',
    marginLeft: 12,
  },
  characterCount: {
    fontSize: 12,
    color: '#9CA3AF',
    textAlign: 'right',
    marginTop: 4,
  },
  feedbackModalFooter: {
    flexDirection: 'row',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#FFFFFF',
    borderTopWidth: 1,
    borderTopColor: '#E5E7EB',
    gap: 12,
  },
  feedbackCancelButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 12,
    backgroundColor: '#F3F4F6',
    alignItems: 'center',
  },
  feedbackCancelButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#6B7280',
  },
  feedbackSubmitButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 12,
    backgroundColor: '#EF4444',
    alignItems: 'center',
  },
  feedbackSubmitButtonDisabled: {
    backgroundColor: '#D1D5DB',
  },
  feedbackSubmitButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  roleBadge: {
    backgroundColor: '#059669',
  },
  roleBadgeText: {
    fontSize: 12,
    color: '#FFFFFF',
    fontWeight: '600',
    marginLeft: 4,
  },
  modalContainer: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  modalHeader: {
    backgroundColor: '#EF4444',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingVertical: 16,
    paddingTop: 48,
    borderBottomLeftRadius: 24,
    borderBottomRightRadius: 24,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  modalCloseText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  modalContent: {
    flex: 1,
    padding: 16,
  },
  inputContainer: {
    marginBottom: 16,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#111827',
    marginBottom: 8,
  },
  modalInput: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    color: '#111827',
  },
  textArea: {
    minHeight: 100,
    textAlignVertical: 'top',
  },
  lockedInputContainer: {
    position: 'relative',
  },
  lockedInput: {
    backgroundColor: '#F3F4F6',
    color: '#6B7280',
    paddingRight: 40,
  },
  lockIcon: {
    position: 'absolute',
    right: 12,
    top: 12,
    bottom: 12,
    justifyContent: 'center',
  },
  lockText: {
    fontSize: 16,
  },
  inputHint: {
    fontSize: 12,
    color: '#6B7280',
    marginTop: 4,
    fontStyle: 'italic',
  },
  saveButton: {
    backgroundColor: '#EF4444',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
    marginTop: 24,
  },
  saveButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  // About Modal Styles
  aboutModalContainer: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  aboutModalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
    backgroundColor: '#F9FAFB',
  },
  aboutModalTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#111827',
    flex: 1,
    textAlign: 'center',
  },
  aboutModalCloseButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#EF4444',
    alignItems: 'center',
    justifyContent: 'center',
  },
  aboutModalCloseText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  aboutModalContent: {
    flex: 1,
    paddingHorizontal: 20,
    paddingVertical: 24,
  },
  aboutLogoContainer: {
    alignItems: 'center',
    marginBottom: 32,
  },
  aboutLogo: {
    width: 80,
    height: 80,
  },
  aboutMainText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#111827',
    lineHeight: 28,
    marginBottom: 20,
    textAlign: 'center',
  },
  aboutSubText: {
    fontSize: 16,
    fontWeight: '400',
    color: '#374151',
    lineHeight: 24,
    marginBottom: 16,
    textAlign: 'justify',
  },
  aboutContactContainer: {
    backgroundColor: '#F9FAFB',
    borderRadius: 12,
    padding: 16,
    marginVertical: 20,
  },
  aboutContactTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#111827',
    marginBottom: 8,
    marginTop: 12,
  },
  aboutContactEmail: {
    fontSize: 15,
    fontWeight: '500',
    color: '#EF4444',
    marginBottom: 4,
    textDecorationLine: 'underline',
  },
  aboutContactInstagram: {
    fontSize: 15,
    fontWeight: '500',
    color: '#EF4444',
    textDecorationLine: 'underline',
  },
  feedbackCard: {
    backgroundColor: '#F8FAFC',
    borderRadius: 16,
    padding: 20,
    marginTop: 15,
    borderWidth: 1,
    borderColor: '#E2E8F0',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.05,
    shadowRadius: 8,
    elevation: 2,
  },
  feedbackHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  feedbackIcon: {
    fontSize: 24,
    marginRight: 12,
  },
  feedbackTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#1F2937',
  },
  feedbackDescription: {
    fontSize: 14,
    lineHeight: 20,
    color: '#6B7280',
    marginBottom: 16,
  },
  feedbackButton: {
    backgroundColor: '#EF4444',
    borderRadius: 12,
    paddingVertical: 12,
    paddingHorizontal: 20,
    alignItems: 'center',
    shadowColor: '#EF4444',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 3,
  },
  feedbackButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  aboutTaglineContainer: {
    backgroundColor: '#EF4444',
    borderRadius: 12,
    padding: 20,
    marginTop: 15,
    marginBottom: 10,
    alignItems: 'center',
  },
  aboutTagline: {
    fontSize: 16,
    fontWeight: '700',
    color: '#FFFFFF',
    textAlign: 'center',
    lineHeight: 24,
  },
  // Feedback Modal Styles
  feedbackModalContainer: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  feedbackModalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#EF4444',
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
  },
  feedbackModalTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#FFFFFF',
  },
  feedbackModalCloseButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    alignItems: 'center',
    justifyContent: 'center',
  },
  feedbackModalCloseText: {
    fontSize: 16,
    color: '#FFFFFF',
    fontWeight: '600',
  },
  feedbackModalContent: {
    flex: 1,
    paddingHorizontal: 20,
  },
  feedbackFormContainer: {
    paddingVertical: 20,
  },
  feedbackLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 8,
    marginTop: 16,
  },
  feedbackInput: {
    backgroundColor: '#FFFFFF',
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    color: '#111827',
  },
  feedbackTextArea: {
    height: 120,
    textAlignVertical: 'top',
  },
  feedbackTypeContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  feedbackTypeOption: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: '#F3F4F6',
    borderWidth: 1,
    borderColor: '#E5E7EB',
  },
  feedbackTypeOptionSelected: {
    backgroundColor: '#EF4444',
    borderColor: '#EF4444',
  },
  feedbackTypeIcon: {
    fontSize: 16,
    marginRight: 6,
  },
  feedbackTypeText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#6B7280',
  },
  feedbackTypeTextSelected: {
    color: '#FFFFFF',
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  starButton: {
    padding: 4,
  },
  star: {
    fontSize: 24,
  },
  starFilled: {
    color: '#FCD34D',
  },
  starEmpty: {
    color: '#D1D5DB',
  },
  ratingText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#6B7280',
    marginLeft: 12,
  },
  characterCount: {
    fontSize: 12,
    color: '#9CA3AF',
    textAlign: 'right',
    marginTop: 4,
  },
  feedbackModalFooter: {
    flexDirection: 'row',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#FFFFFF',
    borderTopWidth: 1,
    borderTopColor: '#E5E7EB',
    gap: 12,
  },
  feedbackCancelButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 12,
    backgroundColor: '#F3F4F6',
    alignItems: 'center',
  },
  feedbackCancelButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#6B7280',
  },
  feedbackSubmitButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 12,
    backgroundColor: '#EF4444',
    alignItems: 'center',
  },
  feedbackSubmitButtonDisabled: {
    backgroundColor: '#D1D5DB',
  },
  feedbackSubmitButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  // Admin Profile Card Styles
  adminProfileCard: {
    backgroundColor: '#DC2626',
    borderRadius: 20,
    padding: 24,
    marginTop: 16,
    alignItems: 'center',
    shadowColor: '#DC2626',
    shadowOffset: {
      width: 0,
      height: 8,
    },
    shadowOpacity: 0.3,
    shadowRadius: 16,
    elevation: 8,
    borderWidth: 2,
    borderColor: '#FEF2F2',
  },
  adminCrownHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
  },
  adminCrown: {
    marginRight: 8,
  },
  adminCrownText: {
    fontSize: 24,
  },
  adminHeaderText: {
    fontSize: 16,
    fontWeight: '800',
    color: '#FFFFFF',
    letterSpacing: 1,
  },
  adminAvatar: {
    width: 120,
    height: 120,
    borderRadius: 60,
    marginBottom: 16,
    borderWidth: 4,
    borderColor: '#FFFFFF',
  },
  adminProfileInfo: {
    alignItems: 'center',
  },
  adminProfileName: {
    fontSize: 28,
    fontWeight: '800',
    color: '#FFFFFF',
    marginBottom: 6,
    textAlign: 'center',
    textShadowColor: 'rgba(0, 0, 0, 0.3)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 2,
  },
  adminProfileTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FEF2F2',
    marginBottom: 12,
    textAlign: 'center',
  },
  adminStatusBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    marginBottom: 16,
  },
  adminStatusText: {
    fontSize: 14,
    color: '#FFFFFF',
    fontWeight: '700',
    marginLeft: 6,
    letterSpacing: 0.5,
  },
  adminLocationInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  adminInstitution: {
    fontSize: 16,
    color: '#FFFFFF',
    marginLeft: 8,
    fontWeight: '500',
  },
  adminCity: {
    fontSize: 16,
    color: '#FFFFFF',
    marginLeft: 8,
    fontWeight: '500',
  },
  adminPowersSection: {
    marginTop: 16,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    padding: 16,
    borderRadius: 12,
    width: '100%',
  },
  adminPowersTitle: {
    fontSize: 14,
    fontWeight: '700',
    color: '#FFFFFF',
    marginBottom: 8,
    textAlign: 'center',
    letterSpacing: 0.5,
  },
  adminPowersList: {
    alignItems: 'flex-start',
  },
  adminPowerItem: {
    fontSize: 13,
    color: '#FEF2F2',
    marginBottom: 4,
    fontWeight: '500',
  },
  // Moderator Profile Card Styles
  moderatorProfileCard: {
    backgroundColor: '#059669',
    borderRadius: 18,
    padding: 20,
    marginTop: 16,
    alignItems: 'center',
    shadowColor: '#059669',
    shadowOffset: {
      width: 0,
      height: 6,
    },
    shadowOpacity: 0.25,
    shadowRadius: 12,
    elevation: 6,
    borderWidth: 2,
    borderColor: '#ECFDF5',
  },
  moderatorShieldHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 14,
    backgroundColor: 'rgba(255, 255, 255, 0.15)',
    paddingHorizontal: 14,
    paddingVertical: 6,
    borderRadius: 16,
  },
  moderatorShield: {
    marginRight: 8,
  },
  moderatorHeaderText: {
    fontSize: 14,
    fontWeight: '700',
    color: '#FFFFFF',
    letterSpacing: 0.8,
  },
  moderatorAvatar: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 14,
    borderWidth: 3,
    borderColor: '#FFFFFF',
  },
  moderatorProfileInfo: {
    alignItems: 'center',
  },
  moderatorProfileName: {
    fontSize: 24,
    fontWeight: '700',
    color: '#FFFFFF',
    marginBottom: 6,
    textAlign: 'center',
    textShadowColor: 'rgba(0, 0, 0, 0.2)',
    textShadowOffset: { width: 0, height: 1 },
    textShadowRadius: 1,
  },
  moderatorProfileTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#ECFDF5',
    marginBottom: 10,
    textAlign: 'center',
  },
  moderatorStatusBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    marginBottom: 14,
  },
  moderatorStatusText: {
    fontSize: 12,
    color: '#FFFFFF',
    fontWeight: '600',
    marginLeft: 4,
    letterSpacing: 0.3,
  },
  moderatorLocationInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 6,
  },
  moderatorInstitution: {
    fontSize: 14,
    color: '#FFFFFF',
    marginLeft: 6,
    fontWeight: '500',
  },
  moderatorCity: {
    fontSize: 14,
    color: '#FFFFFF',
    marginLeft: 6,
    fontWeight: '500',
  },
  moderatorPowersSection: {
    marginTop: 12,
    backgroundColor: 'rgba(255, 255, 255, 0.1)',
    padding: 12,
    borderRadius: 10,
    width: '100%',
  },
  moderatorPowersTitle: {
    fontSize: 12,
    fontWeight: '600',
    color: '#FFFFFF',
    marginBottom: 6,
    textAlign: 'center',
    letterSpacing: 0.3,
  },
  moderatorPowersList: {
    alignItems: 'flex-start',
  },
  moderatorPowerItem: {
    fontSize: 11,
    color: '#ECFDF5',
    marginBottom: 3,
    fontWeight: '500',
  },
  bannerContainer: {
    position: 'absolute',
    bottom: 75, // Tab bar y√ºksekliƒüi
    left: 0,
    right: 0,
    zIndex: 5,
    elevation: 5,
    paddingHorizontal: 16,
  },
});