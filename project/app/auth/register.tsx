import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  SafeAreaView,
  Alert,
  ScrollView,
  KeyboardAvoidingView,
  Platform,
  Modal,
  FlatList,
} from 'react-native';
import { router } from 'expo-router';
import { 
  Mail, 
  Lock, 
  User, 
  Eye, 
  EyeOff, 
  Building, 
  MapPin,
  Stethoscope,
  Phone,
  ChevronDown,
  Check,
  X
} from 'lucide-react-native';
import { useAuth } from '@/contexts/AuthContext';

export default function RegisterPage() {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    confirmPassword: '',
    branch: '',
    city: '',
    institution: '',
    phone: '',
  });
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [showCityModal, setShowCityModal] = useState(false);
  const [showBranchModal, setShowBranchModal] = useState(false);
  const [showTermsModal, setShowTermsModal] = useState(false);
  const [citySearchQuery, setCitySearchQuery] = useState('');
  const [branchSearchQuery, setBranchSearchQuery] = useState('');
  const [termsAccepted, setTermsAccepted] = useState(false);
  const { signUp } = useAuth();

  const healthBranches = [
    'Ameliyathane Teknikeri',
    'Anestezi Teknikeri',
    'Beslenme ve Diyetetik',
    '√áocuk Geli≈üimi Uzmanƒ±',
    'Diyaliz Teknikeri',
    'Diyetisyen',
    'Di≈ü Hekimi',
    'Doktor',
    'Ebe',
    'Eczacƒ±',
    'Fizyoterapi ve Rehabilitasyon',
    'Hem≈üire',
    'ƒ∞lk ve Acil Yardƒ±m Teknikeri (Paramedik)',
    'Odyolog',
    'Optisyen',
    'Perf√ºzyon Teknikeri',
    'Radyoterapi Teknikeri',
    'Tƒ±bbi G√∂r√ºnt√ºleme Teknikeri',
    'Tƒ±bbi Laboratuvar Teknikeri',
    'Tƒ±bbi Sekreter',
    'Ya≈ülƒ± Bakƒ±m Teknikeri',
  ];

  const turkishCities = [
    'Adana', 'Adƒ±yaman', 'Afyonkarahisar', 'Aƒürƒ±', 'Aksaray', 'Amasya', 'Ankara', 'Antalya',
    'Ardahan', 'Artvin', 'Aydƒ±n', 'Balƒ±kesir', 'Bartƒ±n', 'Batman', 'Bayburt', 'Bilecik',
    'Bing√∂l', 'Bitlis', 'Bolu', 'Burdur', 'Bursa', '√áanakkale', '√áankƒ±rƒ±', '√áorum',
    'Denizli', 'Diyarbakƒ±r', 'D√ºzce', 'Edirne', 'Elazƒ±ƒü', 'Erzincan', 'Erzurum', 'Eski≈üehir',
    'Gaziantep', 'Giresun', 'G√ºm√º≈ühane', 'Hakk√¢ri', 'Hatay', 'Iƒüdƒ±r', 'Isparta', 'ƒ∞stanbul',
    'ƒ∞zmir', 'Kahramanmara≈ü', 'Karab√ºk', 'Karaman', 'Kars', 'Kastamonu', 'Kayseri', 'Kilis',
    'Kƒ±rƒ±kkale', 'Kƒ±rklareli', 'Kƒ±r≈üehir', 'Kocaeli', 'Konya', 'K√ºtahya', 'Malatya', 'Manisa',
    'Mardin', 'Mersin', 'Muƒüla', 'Mu≈ü', 'Nev≈üehir', 'Niƒüde', 'Ordu', 'Osmaniye', 'Rize',
    'Sakarya', 'Samsun', '≈ûanlƒ±urfa', 'Siirt', 'Sinop', '≈ûƒ±rnak', 'Sivas', 'Tekirdaƒü',
    'Tokat', 'Trabzon', 'Tunceli', 'U≈üak', 'Van', 'Yalova', 'Yozgat', 'Zonguldak'
  ];

  const handleRegister = async () => {
    console.log('üîÑ Register: Starting registration process...');
    
    // Validate required fields
    const requiredFields = {
      firstName: formData.firstName.trim(),
      lastName: formData.lastName.trim(),
      email: formData.email.trim(),
      password: formData.password,
      branch: formData.branch,
      city: formData.city,
      institution: formData.institution.trim(),
      phone: formData.phone.trim()
    };

    const missingFields = Object.entries(requiredFields)
      .filter(([key, value]) => !value)
      .map(([key]) => key);

    if (missingFields.length > 0) {
      console.error('‚ùå Register: Missing required fields:', missingFields);
      Alert.alert('Hata', 'L√ºtfen t√ºm alanlarƒ± doldurun');
      return;
    }

    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(requiredFields.email)) {
      Alert.alert('Hata', 'Ge√ßerli bir e-posta adresi girin');
      return;
    }

    if (formData.password !== formData.confirmPassword) {
      Alert.alert('Hata', '≈ûifreler e≈üle≈ümiyor');
      return;
    }

    // Password validation - must contain both letters and numbers
    if (formData.password.length < 6) {
      Alert.alert('Hata', '≈ûifre en az 6 karakter olmalƒ±dƒ±r');
      return;
    }

    // Check if password contains both letters and numbers
    const hasLetter = /[a-zA-Z]/.test(formData.password);
    const hasNumber = /[0-9]/.test(formData.password);
    
    if (!hasLetter || !hasNumber) {
      Alert.alert(
        '≈ûifre Gereksinimleri', 
        '≈ûifre hem harf hem de sayƒ± i√ßermelidir.\n\n√ñrnek: 223015Sahan'
      );
      return;
    }

    if (!termsAccepted) {
      Alert.alert('Hata', 'Kullanƒ±m ko≈üullarƒ±nƒ± kabul etmelisiniz');
      return;
    }

    console.log('üìù Register: Form validation passed');
    setLoading(true);
    
    const userData = {
      first_name: requiredFields.firstName,
      last_name: requiredFields.lastName,
      branch: requiredFields.branch,
      city: requiredFields.city,
      institution: requiredFields.institution,
      phone: requiredFields.phone,
      terms_accepted_at: new Date().toISOString(),
      terms_version: 'v1.0',
    };

    // Normalize email: some Supabase instances reject addresses with +tags.
    let normalizedEmail = requiredFields.email;
    const plusIndex = normalizedEmail.indexOf('+');
    const atIndex = normalizedEmail.indexOf('@');
    if (plusIndex > -1 && atIndex > plusIndex) {
      // remove +tag portion (local+tag -> local)
      normalizedEmail = normalizedEmail.slice(0, plusIndex) + normalizedEmail.slice(atIndex);
      console.log('ÔøΩ Register: Normalized email from', requiredFields.email, 'to', normalizedEmail);
    }

    console.log('ÔøΩüì§ Register: Calling signUp with data:', { 
      email: normalizedEmail, 
      userData: { ...userData, phone: '[PHONE_PROVIDED]' }
    });

    try {
      const { error } = await signUp(normalizedEmail, formData.password, userData);

      if (error) {
        // Keep developer-friendly logs and extract message safely
        console.error('‚ùå Register: Sign up returned error object:', error);
        const msg = (error && (error.message || String(error))) || 'Kayƒ±t sƒ±rasƒ±nda bilinmeyen bir hata olu≈ütu';
        const code = (error as any).code;

        // Prefer code-based handling when available
        let errorMessage = msg;
        if (code === 'email_address_invalid') {
          errorMessage = 'Ge√ßersiz e-posta adresi. L√ºtfen e-posta adresinizi kontrol edin ve √∂zel karakterleri (√∂rn. +) kaldƒ±rmayƒ± deneyin.';
        } else {
          const lower = msg.toLowerCase();
          if (lower.includes('duplicate') || lower.includes('already')) {
            errorMessage = 'Bu e-posta adresi zaten kullanƒ±lƒ±yor';
          } else if (lower.includes('invalid')) {
            errorMessage = 'Ge√ßersiz e-posta adresi veya ≈üifre';
          } else if (lower.includes('weak')) {
            errorMessage = '≈ûifre √ßok zayƒ±f, daha g√º√ßl√º bir ≈üifre se√ßin';
          } else if (lower.includes('profil olu≈üturulurken')) {
            errorMessage = 'Profil bilgileri kaydedilirken hata olu≈ütu. L√ºtfen tekrar deneyin.';
          }
        }

        Alert.alert('Kayƒ±t Hatasƒ±', errorMessage);
      } else {
        console.log('‚úÖ Register: Registration successful');
        Alert.alert('Ba≈üarƒ±lƒ±', 'Kayƒ±t i≈ülemi tamamlandƒ±! Giri≈ü yapmak i√ßin l√ºtfen e-posta adresinizi ve ≈üifrenizi kullanƒ±n.', [
          { text: 'Giri≈ü Yap', onPress: () => router.replace('/auth/login') }
        ]);
      }
    } catch (err) {
      // Catch unexpected runtime exceptions (network JSON parse errors, etc.)
      console.error('‚ùå Register: Unexpected exception during signUp:', err);
      const message = (err && (((err as any).message) || String(err))) || 'Beklenmeyen bir hata olu≈ütu';
      Alert.alert('Kayƒ±t Hatasƒ±', message);
    } finally {
      // Ensure loading state is cleared on all code paths
      setLoading(false);
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <KeyboardAvoidingView 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardView}
      >
        <ScrollView contentContainerStyle={styles.scrollContent}>
          {/* Header */}
          <View style={styles.header}>
            <TouchableOpacity onPress={() => router.replace('/auth/login')} style={styles.backButton}>
              <Text style={styles.backButtonText}>‚Üê Geri</Text>
            </TouchableOpacity>
            <Text style={styles.headerTitle}>Kayƒ±t Ol</Text>
          </View>

          <View style={styles.formContainer}>
            {/* Name Inputs */}
            <View style={styles.nameRow}>
              <View style={[styles.inputContainer, { flex: 1, marginRight: 8 }]}>
                <Text style={styles.inputLabel}>Ad *</Text>
                <View style={styles.inputWrapper}>
                  <User size={20} color="#EF4444" style={styles.inputIcon} />
                  <TextInput
                    style={styles.input}
                    placeholder="Ad"
                    value={formData.firstName}
                    onChangeText={(text) => setFormData({...formData, firstName: text})}
                    placeholderTextColor="#EF4444"
                    autoComplete="given-name"
                    textContentType="givenName"
                  />
                </View>
              </View>
              <View style={[styles.inputContainer, { flex: 1, marginLeft: 8 }]}>
                <Text style={styles.inputLabel}>Soyad *</Text>
                <View style={styles.inputWrapper}>
                  <TextInput
                    style={[styles.input, { paddingLeft: 16 }]}
                    placeholder="Soyad"
                    value={formData.lastName}
                    onChangeText={(text) => setFormData({...formData, lastName: text})}
                    placeholderTextColor="#EF4444"
                    autoComplete="family-name"
                    textContentType="familyName"
                  />
                </View>
              </View>
            </View>

            {/* Email Input */}
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>E-posta Adresi *</Text>
              <View style={styles.inputWrapper}>
                <Mail size={20} color="#EF4444" style={styles.inputIcon} />
                <TextInput
                  style={styles.input}
                  placeholder="E-posta Adresi"
                  value={formData.email}
                  onChangeText={(text) => setFormData({...formData, email: text})}
                  keyboardType="email-address"
                  autoCapitalize="none"
                  placeholderTextColor="#EF4444"
                />
              </View>
            </View>

            {/* Branch Picker */}
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Bran≈üƒ±nƒ±z *</Text>
              <TouchableOpacity
                style={styles.selectorButton}
                onPress={() => setShowBranchModal(true)}
                activeOpacity={0.7}
              >
                <Stethoscope size={20} color="#EF4444" style={styles.inputIcon} />
                <Text style={[
                  styles.selectorText,
                  !formData.branch && styles.placeholderText
                ]}>
                  {formData.branch || 'Bran≈üƒ±nƒ±zƒ± se√ßin'}
                </Text>
                <ChevronDown size={20} color="#EF4444" />
              </TouchableOpacity>
            </View>

            {/* City Picker */}
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>√áalƒ±≈ütƒ±ƒüƒ±nƒ±z ≈ûehir *</Text>
              <TouchableOpacity
                style={styles.selectorButton}
                onPress={() => setShowCityModal(true)}
                activeOpacity={0.7}
              >
                <MapPin size={20} color="#EF4444" style={styles.inputIcon} />
                <Text style={[
                  styles.selectorText,
                  !formData.city && styles.placeholderText
                ]}>
                  {formData.city || '≈ûehir se√ßin'}
                </Text>
                <ChevronDown size={20} color="#EF4444" />
              </TouchableOpacity>
            </View>

            {/* Institution Input */}
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>√áalƒ±≈ütƒ±ƒüƒ±nƒ±z Kurum/Hastane *</Text>
              <View style={styles.inputWrapper}>
                <Building size={20} color="#EF4444" style={styles.inputIcon} />
                <TextInput
                  style={styles.input}
                  placeholder="√áalƒ±≈ütƒ±ƒüƒ±nƒ±z Kurum/Hastane"
                  value={formData.institution}
                  onChangeText={(text) => setFormData({...formData, institution: text})}
                  placeholderTextColor="#EF4444"
                />
              </View>
            </View>

            {/* Phone Input */}
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>Telefon Numarasƒ± *</Text>
              <View style={styles.inputWrapper}>
                <Phone size={20} color="#EF4444" style={styles.inputIcon} />
                <TextInput
                  style={styles.input}
                  placeholder="Telefon Numarasƒ±"
                  value={formData.phone}
                  onChangeText={(text) => setFormData({...formData, phone: text})}
                  keyboardType="phone-pad"
                  placeholderTextColor="#EF4444"
                  autoComplete="tel"
                  textContentType="telephoneNumber"
                />
              </View>
            </View>

            {/* Password Inputs */}
            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>≈ûifre *</Text>
              <Text style={styles.passwordHint}>
                ≈ûifre hem harf hem de sayƒ± i√ßermelidir (√ñrnek: 223015Sahan)
              </Text>
              <View style={styles.inputWrapper}>
                <Lock size={20} color="#EF4444" style={styles.inputIcon} />
                <TextInput
                  style={styles.input}
                  placeholder="≈ûifre (Harf + Sayƒ±)"
                  value={formData.password}
                  onChangeText={(text) => setFormData({...formData, password: text})}
                  secureTextEntry={!showPassword}
                  placeholderTextColor="#EF4444"
                />
                <TouchableOpacity
                  onPress={() => setShowPassword(!showPassword)}
                  style={styles.eyeButton}
                >
                  {showPassword ? (
                    <EyeOff size={20} color="#EF4444" />
                  ) : (
                    <Eye size={20} color="#EF4444" />
                  )}
                </TouchableOpacity>
              </View>
            </View>

            <View style={styles.inputContainer}>
              <Text style={styles.inputLabel}>≈ûifre Tekrar *</Text>
              <View style={styles.inputWrapper}>
                <Lock size={20} color="#EF4444" style={styles.inputIcon} />
                <TextInput
                  style={styles.input}
                  placeholder="≈ûifre Tekrar"
                  value={formData.confirmPassword}
                  onChangeText={(text) => setFormData({...formData, confirmPassword: text})}
                  secureTextEntry={!showConfirmPassword}
                  placeholderTextColor="#EF4444"
                />
                <TouchableOpacity
                  onPress={() => setShowConfirmPassword(!showConfirmPassword)}
                  style={styles.eyeButton}
                >
                  {showConfirmPassword ? (
                    <EyeOff size={20} color="#EF4444" />
                  ) : (
                    <Eye size={20} color="#EF4444" />
                  )}
                </TouchableOpacity>
              </View>
            </View>

            {/* Terms and Conditions */}
            <View style={styles.termsContainer}>
              <TouchableOpacity
                style={styles.termsCheckboxContainer}
                onPress={() => setTermsAccepted(!termsAccepted)}
                activeOpacity={0.7}
              >
                <View style={[styles.checkbox, termsAccepted && styles.checkboxChecked]}>
                  {termsAccepted && <Check size={16} color="#FFFFFF" />}
                </View>
                <Text style={styles.termsText}>
                  <Text style={styles.termsTextNormal}>Kullanƒ±m Ko≈üullarƒ± ve Gizlilik ≈ûartlarƒ±nƒ± okudum ve kabul ediyorum. </Text>
                  <Text style={styles.termsLink} onPress={() => setShowTermsModal(true)}>
                    Ko≈üullarƒ± G√∂r√ºnt√ºle
                  </Text>
                </Text>
              </TouchableOpacity>
            </View>

            {/* Register Button */}
            <TouchableOpacity
              style={[
                styles.registerButton, 
                (!termsAccepted || loading) && styles.buttonDisabled
              ]}
              onPress={handleRegister}
              disabled={!termsAccepted || loading}
            >
              <Text style={styles.registerButtonText}>
                {loading ? 'Kayƒ±t Olunuyor...' : 'Kayƒ±t Ol'}
              </Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>

      {/* City Selection Modal */}
      <Modal
        visible={showCityModal}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setShowCityModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContainer}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>≈ûehir Se√ßin</Text>
              <TouchableOpacity onPress={() => setShowCityModal(false)}>
                <X size={24} color="#EF4444" />
              </TouchableOpacity>
            </View>
            
            <View style={styles.searchContainer}>
              <TextInput
                style={styles.searchInput}
                placeholder="≈ûehir ara..."
                value={citySearchQuery}
                onChangeText={setCitySearchQuery}
                placeholderTextColor="#9CA3AF"
              />
            </View>
            
            <FlatList
              data={turkishCities.filter(city => 
                city.toLowerCase().includes(citySearchQuery.toLowerCase())
              )}
              keyExtractor={(item) => item}
              renderItem={({ item }) => (
                <TouchableOpacity
                  style={[
                    styles.optionItem,
                    formData.city === item && styles.selectedOption
                  ]}
                  onPress={() => {
                    setFormData({...formData, city: item});
                    setShowCityModal(false);
                    setCitySearchQuery('');
                  }}
                  activeOpacity={0.7}
                >
                  <Text style={[
                    styles.optionText,
                    formData.city === item && styles.selectedOptionText
                  ]}>
                    {item}
                  </Text>
                  {formData.city === item && (
                    <Check size={20} color="#EF4444" />
                  )}
                </TouchableOpacity>
              )}
              style={styles.optionsList}
              showsVerticalScrollIndicator={false}
            />
          </View>
        </View>
      </Modal>

      {/* Branch Selection Modal */}
      <Modal
        visible={showBranchModal}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setShowBranchModal(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContainer}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Bran≈ü Se√ßin</Text>
              <TouchableOpacity onPress={() => setShowBranchModal(false)}>
                <X size={24} color="#EF4444" />
              </TouchableOpacity>
            </View>
            
            <View style={styles.searchContainer}>
              <TextInput
                style={styles.searchInput}
                placeholder="Bran≈ü ara..."
                value={branchSearchQuery}
                onChangeText={setBranchSearchQuery}
                placeholderTextColor="#9CA3AF"
              />
            </View>
            
            <FlatList
              data={healthBranches.filter(branch => 
                branch.toLowerCase().includes(branchSearchQuery.toLowerCase())
              )}
              keyExtractor={(item) => item}
              renderItem={({ item }) => (
                <TouchableOpacity
                  style={[
                    styles.optionItem,
                    formData.branch === item && styles.selectedOption
                  ]}
                  onPress={() => {
                    setFormData({...formData, branch: item});
                    setShowBranchModal(false);
                    setBranchSearchQuery('');
                  }}
                  activeOpacity={0.7}
                >
                  <Text style={[
                    styles.optionText,
                    formData.branch === item && styles.selectedOptionText
                  ]}>
                    {item}
                  </Text>
                  {formData.branch === item && (
                    <Check size={20} color="#EF4444" />
                  )}
                </TouchableOpacity>
              )}
              style={styles.optionsList}
              showsVerticalScrollIndicator={false}
            />
          </View>
        </View>
      </Modal>

      {/* Terms and Conditions Modal */}
      <Modal
        visible={showTermsModal}
        animationType="slide"
        presentationStyle="pageSheet"
        onRequestClose={() => setShowTermsModal(false)}
      >
        <SafeAreaView style={styles.termsModalContainer}>
          <View style={styles.termsModalHeader}>
            <View style={styles.termsModalTitleContainer}>
              <Text style={styles.termsModalTitle}>Kullanƒ±m Ko≈üullarƒ±</Text>
              <Text style={styles.termsModalSubtitle}>Kariyer Saƒülƒ±k Platformu</Text>
            </View>
            <TouchableOpacity
              style={styles.termsModalCloseButton}
              onPress={() => setShowTermsModal(false)}
            >
              <X size={20} color="#FFFFFF" />
            </TouchableOpacity>
          </View>
          
          <ScrollView 
            style={styles.termsModalContent} 
            showsVerticalScrollIndicator={true}
            contentContainerStyle={styles.termsModalScrollContent}
          >
            <Text style={styles.termsLastUpdated}>Son G√ºncelleme: 2025</Text>
            <Text style={styles.termsIntro}>
              Bu uygulamaya kayƒ±t olarak a≈üaƒüƒ±daki ≈üartlarƒ± kabul etmi≈ü olursunuz. L√ºtfen dikkatlice okuyunuz.
            </Text>
            
            <View style={styles.termsSection}>
              <Text style={styles.termsSectionTitle}>1. Genel Bilgiler</Text>
              <Text style={styles.termsSectionText}>
                Kariyer Saƒülƒ±k, saƒülƒ±k profesyonelleri ve √∂ƒürencileri i√ßin geli≈ütirilmi≈ü dijital bir ileti≈üim ve kariyer platformudur.
              </Text>
              <Text style={styles.termsSectionText}>
                Uygulama, kullanƒ±cƒ±larƒ±n g√ºvenli ve profesyonel bir ortamda etkile≈üim kurmasƒ±nƒ± ama√ßlar.
              </Text>
            </View>

            <View style={styles.termsSection}>
              <Text style={styles.termsSectionTitle}>2. Kayƒ±t ve Hesap Kullanƒ±mƒ±</Text>
              <Text style={styles.termsSectionText}>
                Uygulamayƒ± kullanabilmek i√ßin doƒüru ve g√ºncel bilgilerle kayƒ±t olmanƒ±z gerekmektedir.
              </Text>
              <Text style={styles.termsSectionText}>
                Kullanƒ±cƒ±, kendi hesabƒ± √ºzerinden yapƒ±lan t√ºm i≈ülemlerden sorumludur.
              </Text>
              <Text style={styles.termsSectionText}>
                Ba≈ükasƒ±nƒ±n adƒ±na hesap a√ßmak, yanlƒ±≈ü/yanƒ±ltƒ±cƒ± bilgi vermek yasaktƒ±r.
              </Text>
              <Text style={styles.termsSectionText}>
                Hesap bilgilerinizin g√ºvenliƒüini saƒülamak sizin sorumluluƒüunuzdadƒ±r.
              </Text>
            </View>

            <View style={styles.termsSection}>
              <Text style={styles.termsSectionTitle}>3. Kullanƒ±cƒ± Y√ºk√ºml√ºl√ºkleri</Text>
              <Text style={styles.termsSectionText}>
                Kullanƒ±cƒ±lar;
              </Text>
              <Text style={styles.termsSectionText}>
                Uygulama i√ßerisinde payla≈üacaklarƒ± t√ºm i√ßeriklerden kendileri sorumludur.
              </Text>
              <Text style={styles.termsSectionText}>
                Payla≈üƒ±mlarƒ±nda hakaret, ≈üiddet, nefret s√∂ylemi, reklam, yanƒ±ltƒ±cƒ± bilgi veya yasa dƒ±≈üƒ± i√ßerik bulunduramaz.
              </Text>
              <Text style={styles.termsSectionText}>
                Mesleki etik kurallarƒ±na ve ki≈üisel verilerin gizliliƒüine uymak zorundadƒ±r.
              </Text>
              <Text style={styles.termsSectionText}>
                Saƒülƒ±k bilgisi payla≈üƒ±rken yanlƒ±≈ü y√∂nlendirici veya kanƒ±tsƒ±z bilgi vermemelidir.
              </Text>
            </View>

            <View style={styles.termsSection}>
              <Text style={styles.termsSectionTitle}>4. Mesajla≈üma ve ƒ∞√ßerik Payla≈üƒ±mƒ±</Text>
              <Text style={styles.termsSectionText}>
                Kullanƒ±cƒ±lar yalnƒ±zca profesyonel ama√ßlarla i√ßerik ve mesaj payla≈üabilir.
              </Text>
              <Text style={styles.termsSectionText}>
                Tƒ±bbi tavsiye, te≈ühis veya tedavi √∂nerisi doƒürudan kullanƒ±cƒ±lar arasƒ±nda hukuki baƒülayƒ±cƒ±lƒ±k olu≈üturmaz.
              </Text>
              <Text style={styles.termsSectionText}>
                Payla≈üƒ±lan t√ºm i√ßeriklerden ve doƒüacak hukuki sonu√ßlardan kullanƒ±cƒ± sorumludur.
              </Text>
            </View>

            <View style={styles.termsSection}>
              <Text style={styles.termsSectionTitle}>5. ƒ∞≈ü ƒ∞lanlarƒ±</Text>
              <Text style={styles.termsSectionText}>
                Kullanƒ±cƒ±lar ilan olu≈ütururken doƒüru, eksiksiz ve yasal bilgi vermekle y√ºk√ºml√ºd√ºr.
              </Text>
              <Text style={styles.termsSectionText}>
                Yanƒ±ltƒ±cƒ± veya sahte ilan olu≈üturulmasƒ± durumunda hesap kalƒ±cƒ± olarak silinir.
              </Text>
              <Text style={styles.termsSectionText}>
                Kariyer Saƒülƒ±k, ilanlarda yer alan bilgilerin doƒüruluƒüunu garanti etmez, yalnƒ±zca ilanƒ± yayƒ±nlayan ki≈üiden sorumluluk talep edilebilir.
              </Text>
            </View>

            <View style={styles.termsSection}>
              <Text style={styles.termsSectionTitle}>6. Gizlilik ve Veri Koruma</Text>
              <Text style={styles.termsSectionText}>
                Kullanƒ±cƒ± bilgileri (ad, soyad, bran≈ü, kurum, e-posta vb.) yalnƒ±zca uygulama i√ßi kullanƒ±m ve doƒürulama ama√ßlƒ± saklanƒ±r.
              </Text>
              <Text style={styles.termsSectionText}>
                √ú√ß√ºnc√º ki≈üilerle payla≈üƒ±lmaz, satƒ±lmaz veya reklam ama√ßlƒ± kullanƒ±lmaz.
              </Text>
              <Text style={styles.termsSectionText}>
                ƒ∞stediƒüiniz zaman hesabƒ±nƒ±zƒ± ve verilerinizi silebilirsiniz.
              </Text>
            </View>

            <View style={styles.termsSection}>
              <Text style={styles.termsSectionTitle}>7. √áevrimdƒ±≈üƒ± ƒ∞√ßerikler</Text>
              <Text style={styles.termsSectionText}>
                ƒ∞la√ß prospekt√ºsleri ve tedavi algoritmalarƒ± yalnƒ±zca bilgilendirme amacƒ±yla sunulur.
              </Text>
              <Text style={styles.termsSectionText}>
                Tƒ±bbi karar verme s√ºre√ßlerinde tek ba≈üƒ±na kullanƒ±lmamalƒ±, sorumluluk tamamen kullanƒ±cƒ±ya aittir.
              </Text>
            </View>

            <View style={styles.termsSection}>
              <Text style={styles.termsSectionTitle}>8. Sorumluluk Reddi</Text>
              <Text style={styles.termsSectionText}>
                Kariyer Saƒülƒ±k, kullanƒ±cƒ±lar tarafƒ±ndan yapƒ±lan payla≈üƒ±mlardan, i≈ü ilanlarƒ±ndan veya mesajlardan sorumlu deƒüildir.
              </Text>
              <Text style={styles.termsSectionText}>
                Uygulama √ºzerinden edinilen bilgilerin yanlƒ±≈ü kullanƒ±mƒ±ndan doƒüacak hukuki veya tƒ±bbi sonu√ßlardan uygulama sahibi sorumlu tutulamaz.
              </Text>
              <Text style={styles.termsSectionText}>
                Uygulama "olduƒüu gibi" sunulmakta olup, hatasƒ±z veya kesintisiz √ßalƒ±≈üacaƒüƒ± garanti edilmez.
              </Text>
            </View>

            <View style={styles.termsSection}>
              <Text style={styles.termsSectionTitle}>9. Hesap Kapatma</Text>
              <Text style={styles.termsSectionText}>
                Kullanƒ±cƒ±, dilediƒüi zaman ayarlar men√ºs√ºnden hesabƒ±nƒ± silebilir.
              </Text>
              <Text style={styles.termsSectionText}>
                Kurallara aykƒ±rƒ± davranan kullanƒ±cƒ±larƒ±n hesaplarƒ±, bildirim yapƒ±lmaksƒ±zƒ±n kalƒ±cƒ± olarak kapatƒ±labilir.
              </Text>
            </View>

            <View style={styles.termsSection}>
              <Text style={styles.termsSectionTitle}>10. ƒ∞leti≈üim</Text>
              <Text style={styles.termsSectionText}>
                Her t√ºrl√º soru, √∂neri ve ≈üik√¢yet i√ßin bizimle ileti≈üime ge√ßebilirsiniz:
              </Text>
              <Text style={styles.termsContactTitle}>üì© Destek Mail Adresi</Text>
              <Text style={styles.termsContactEmail}>kariyersaglik@outlook.com</Text>
              <Text style={styles.termsContactTitle}>üì∑ Instagram</Text>
              <Text style={styles.termsContactInstagram}>@kariyer.saglik</Text>
              
              <View style={[styles.termsFooterSection, { marginTop: 20 }]}>
                <Text style={styles.termsFooterText}>
                  üìå Kayƒ±t olarak yukarƒ±daki kullanƒ±m ko≈üullarƒ±nƒ± ve gizlilik ≈üartlarƒ±nƒ± okuduƒüunuzu, anladƒ±ƒüƒ±nƒ±zƒ± ve kabul ettiƒüinizi onaylamƒ±≈ü olursunuz.
                </Text>
              </View>
            </View>
          </ScrollView>
        </SafeAreaView>
      </Modal>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F9FAFB',
  },
  keyboardView: {
    flex: 1,
  },
  scrollContent: {
    flexGrow: 1,
    paddingHorizontal: 24,
    paddingBottom: 40,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingTop: 20,
    paddingBottom: 32,
  },
  backButton: {
    padding: 8,
  },
  backButtonText: {
    fontSize: 16,
    color: '#EF4444',
    fontWeight: '600',
  },
  headerTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: '#111827',
    marginLeft: 16,
  },
  formContainer: {
    width: '100%',
    maxWidth: 400,
    alignSelf: 'center',
  },
  nameRow: {
    flexDirection: 'row',
  },
  inputContainer: {
    marginBottom: 20,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#EF4444',
    marginBottom: 8,
  },
  passwordHint: {
    fontSize: 12,
    color: '#6B7280',
    marginBottom: 8,
    fontStyle: 'italic',
  },
  inputWrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#EF4444',
    paddingHorizontal: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  inputIcon: {
    marginRight: 12,
  },
  input: {
    flex: 1,
    paddingVertical: 16,
    fontSize: 16,
    color: '#EF4444',
    fontWeight: '500',
  },
  selectorButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#EF4444',
    paddingHorizontal: 16,
    paddingVertical: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  selectorContent: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 16,
    paddingRight: 16,
  },
  selectorText: {
    fontSize: 16,
    color: '#EF4444',
    fontWeight: '500',
    flex: 1,
    marginLeft: 12,
  },
  placeholderText: {
    color: '#EF4444',
    opacity: 0.7,
  },
  eyeButton: {
    padding: 4,
  },
  registerButton: {
    backgroundColor: '#EF4444',
    borderRadius: 12,
    paddingVertical: 16,
    alignItems: 'center',
    marginTop: 8,
    shadowColor: '#EF4444',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 4,
  },
  buttonDisabled: {
    opacity: 0.6,
  },
  registerButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  loginContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginTop: 24,
  },
  loginText: {
    fontSize: 14,
    color: '#6B7280',
  },
  loginLink: {
    fontSize: 14,
    color: '#EF4444',
    fontWeight: '600',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    paddingHorizontal: 20,
  },
  modalContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: 20,
    maxHeight: '85%',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 10,
    },
    shadowOpacity: 0.3,
    shadowRadius: 20,
    elevation: 20,
  },
  modalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#EF4444',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#FFFFFF',
  },
  modalCloseButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    alignItems: 'center',
    justifyContent: 'center',
  },
  searchContainer: {
    paddingHorizontal: 20,
    paddingVertical: 16,
    backgroundColor: '#F8FAFC',
  },
  searchInput: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    color: '#111827',
    borderWidth: 2,
    borderColor: '#EF4444',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  optionsList: {
    maxHeight: 400,
  },
  optionItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderBottomWidth: 0.5,
    borderBottomColor: '#E5E7EB',
    minHeight: 60,
    backgroundColor: '#FFFFFF',
  },
  selectedOption: {
    backgroundColor: '#FEF2F2',
    borderLeftWidth: 5,
    borderLeftColor: '#EF4444',
  },
  optionText: {
    fontSize: 15,
    color: '#111827',
    fontWeight: '600',
    flex: 1,
    lineHeight: 22,
  },
  selectedOptionText: {
    color: '#EF4444',
    fontWeight: '800',
  },
  // Terms and Conditions Styles
  termsContainer: {
    marginTop: 16,
    marginBottom: 8,
  },
  termsCheckboxContainer: {
    flexDirection: 'row',
    alignItems: 'flex-start',
  },
  checkbox: {
    width: 20,
    height: 20,
    borderRadius: 4,
    borderWidth: 2,
    borderColor: '#EF4444',
    backgroundColor: '#FFFFFF',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
    marginTop: 2,
  },
  checkboxChecked: {
    backgroundColor: '#EF4444',
  },
  termsText: {
    flex: 1,
    fontSize: 14,
    lineHeight: 20,
  },
  termsTextNormal: {
    color: '#374151',
  },
  termsLink: {
    color: '#EF4444',
    fontWeight: '600',
    textDecorationLine: 'underline',
  },
  // Terms Modal Styles
  termsModalContainer: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  termsModalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 24,
    paddingVertical: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E7EB',
    backgroundColor: '#F8FAFC',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  termsModalTitleContainer: {
    flex: 1,
    alignItems: 'center',
  },
  termsModalTitle: {
    fontSize: 20,
    fontWeight: '700',
    color: '#1F2937',
    textAlign: 'center',
  },
  termsModalSubtitle: {
    fontSize: 14,
    fontWeight: '500',
    color: '#6B7280',
    textAlign: 'center',
    marginTop: 4,
  },
  termsModalCloseButton: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: '#EF4444',
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 3,
  },
  termsModalContent: {
    flex: 1,
  },
  termsModalScrollContent: {
    paddingHorizontal: 24,
    paddingVertical: 24,
    paddingBottom: 60,
  },
  termsLastUpdated: {
    fontSize: 12,
    fontWeight: '600',
    color: '#9CA3AF',
    textAlign: 'center',
    marginBottom: 20,
    backgroundColor: '#F3F4F6',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 12,
    alignSelf: 'center',
  },
  termsIntro: {
    fontSize: 16,
    fontWeight: '500',
    color: '#4B5563',
    lineHeight: 26,
    marginBottom: 32,
    textAlign: 'center',
    backgroundColor: '#F8FAFC',
    padding: 16,
    borderRadius: 12,
    borderLeftWidth: 4,
    borderLeftColor: '#EF4444',
  },
  termsSection: {
    marginBottom: 28,
    backgroundColor: '#FFFFFF',
    padding: 20,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E7EB',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  termsSectionTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#1F2937',
    marginBottom: 16,
    paddingBottom: 8,
    borderBottomWidth: 2,
    borderBottomColor: '#EF4444',
  },
  termsSectionText: {
    fontSize: 15,
    fontWeight: '400',
    color: '#4B5563',
    lineHeight: 24,
    marginBottom: 12,
  },
  termsBold: {
    fontWeight: '700',
    color: '#EF4444',
  },
  termsContactTitle: {
    fontSize: 16,
    fontWeight: '700',
    color: '#1F2937',
    marginTop: 16,
    marginBottom: 8,
  },
  termsContactEmail: {
    fontSize: 15,
    fontWeight: '600',
    color: '#EF4444',
    marginBottom: 8,
    backgroundColor: '#FEF2F2',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#FECACA',
  },
  termsContactInstagram: {
    fontSize: 15,
    fontWeight: '600',
    color: '#EF4444',
    backgroundColor: '#FEF2F2',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#FECACA',
  },
  termsFooterSection: {
    backgroundColor: '#F0F9FF',
    borderRadius: 16,
    padding: 20,
    marginTop: 32,
    borderWidth: 2,
    borderColor: '#BAE6FD',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  termsFooterText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#111827',
    lineHeight: 22,
    textAlign: 'center',
  },
});